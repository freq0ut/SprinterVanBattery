
STM32VanBattery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000217c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080022b8  080022b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d4  080022d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022dc  080022dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080022f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080022f0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c09  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001218  00000000  00000000  00024c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00025e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000470  00000000  00000000  00026360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013028  00000000  00000000  000267d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ae0  00000000  00000000  000397f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007827a  00000000  00000000  0003f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b7552  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012e4  00000000  00000000  000b75a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080022a0 	.word	0x080022a0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080022a0 	.word	0x080022a0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
void setup_pin_states(void);
void LED_blinky(void);
void testFunc(void);

int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  HAL_Init();
 8000488:	f000 fba1 	bl	8000bce <HAL_Init>
  SystemClock_Config();
 800048c:	f000 f98a 	bl	80007a4 <SystemClock_Config>
  MX_GPIO_Init();
 8000490:	f000 fa28 	bl	80008e4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000494:	f000 f9ce 	bl	8000834 <MX_ADC_Init>

  //uint32_t adc_values[10];

  // initialize digital output pin states
  setup_pin_states();
 8000498:	f000 f824 	bl	80004e4 <setup_pin_states>

  //blinky on start up
  LED_blinky();
 800049c:	f000 f88a 	bl	80005b4 <LED_blinky>

  //test function
  testFunc();
 80004a0:	f000 f934 	bl	800070c <testFunc>

  while (1)
    {
      // no-op for break point
      asm("nop");
 80004a4:	bf00      	nop

      // blink heart beat LED to indicate FW 'OK'
      HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2120      	movs	r1, #32
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <main+0x58>)
 80004ac:	f001 f931 	bl	8001712 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80004b0:	2064      	movs	r0, #100	; 0x64
 80004b2:	f000 fbfb 	bl	8000cac <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2120      	movs	r1, #32
 80004ba:	4808      	ldr	r0, [pc, #32]	; (80004dc <main+0x58>)
 80004bc:	f001 f929 	bl	8001712 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80004c0:	2064      	movs	r0, #100	; 0x64
 80004c2:	f000 fbf3 	bl	8000cac <HAL_Delay>

      // sample and update DIGITAL INPUTS
      HAL_GPIO_ReadPin(GPIOC, UV_INPUT_Pin); // BMS UV
 80004c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <main+0x5c>)
 80004cc:	f001 f90a 	bl	80016e4 <HAL_GPIO_ReadPin>
      HAL_GPIO_ReadPin(GPIOC, OV_INPUT_Pin); // BMS OV
 80004d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <main+0x5c>)
 80004d6:	f001 f905 	bl	80016e4 <HAL_GPIO_ReadPin>
      asm("nop");
 80004da:	e7e3      	b.n	80004a4 <main+0x20>
 80004dc:	40020400 	.word	0x40020400
 80004e0:	40020800 	.word	0x40020800

080004e4 <setup_pin_states>:

    }
}

void setup_pin_states(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ee:	482e      	ldr	r0, [pc, #184]	; (80005a8 <setup_pin_states+0xc4>)
 80004f0:	f001 f90f 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT2_LED_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fa:	482b      	ldr	r0, [pc, #172]	; (80005a8 <setup_pin_states+0xc4>)
 80004fc:	f001 f909 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT3_LED_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000506:	4828      	ldr	r0, [pc, #160]	; (80005a8 <setup_pin_states+0xc4>)
 8000508:	f001 f903 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT4_LED_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000512:	4825      	ldr	r0, [pc, #148]	; (80005a8 <setup_pin_states+0xc4>)
 8000514:	f001 f8fd 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT5_LED_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051e:	4822      	ldr	r0, [pc, #136]	; (80005a8 <setup_pin_states+0xc4>)
 8000520:	f001 f8f7 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT6_LED_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052a:	481f      	ldr	r0, [pc, #124]	; (80005a8 <setup_pin_states+0xc4>)
 800052c:	f001 f8f1 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2102      	movs	r1, #2
 8000534:	481d      	ldr	r0, [pc, #116]	; (80005ac <setup_pin_states+0xc8>)
 8000536:	f001 f8ec 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, _60A_CKT2_LED_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2104      	movs	r1, #4
 800053e:	481b      	ldr	r0, [pc, #108]	; (80005ac <setup_pin_states+0xc8>)
 8000540:	f001 f8e7 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	4819      	ldr	r0, [pc, #100]	; (80005b0 <setup_pin_states+0xcc>)
 800054c:	f001 f8e1 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	4815      	ldr	r0, [pc, #84]	; (80005ac <setup_pin_states+0xc8>)
 8000556:	f001 f8dc 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, UV_TO_INV_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000560:	4812      	ldr	r0, [pc, #72]	; (80005ac <setup_pin_states+0xc8>)
 8000562:	f001 f8d6 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	480f      	ldr	r0, [pc, #60]	; (80005ac <setup_pin_states+0xc8>)
 800056e:	f001 f8d0 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, OV_TO_CHGR_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <setup_pin_states+0xc8>)
 800057a:	f001 f8ca 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <setup_pin_states+0xc8>)
 8000586:	f001 f8c4 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GV_CLOSE_PULSE_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	4806      	ldr	r0, [pc, #24]	; (80005ac <setup_pin_states+0xc8>)
 8000592:	f001 f8be 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GV_OPEN_PULSE_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <setup_pin_states+0xc8>)
 800059e:	f001 f8b8 	bl	8001712 <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40020400 	.word	0x40020400
 80005b0:	40020800 	.word	0x40020800

080005b4 <LED_blinky>:

void LED_blinky(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	4850      	ldr	r0, [pc, #320]	; (8000700 <LED_blinky+0x14c>)
 80005c0:	f001 f8a7 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80005c4:	20fa      	movs	r0, #250	; 0xfa
 80005c6:	f000 fb71 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	484b      	ldr	r0, [pc, #300]	; (8000700 <LED_blinky+0x14c>)
 80005d2:	f001 f89e 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT2_LED_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	4848      	ldr	r0, [pc, #288]	; (8000700 <LED_blinky+0x14c>)
 80005de:	f001 f898 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80005e2:	20fa      	movs	r0, #250	; 0xfa
 80005e4:	f000 fb62 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT2_LED_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ee:	4844      	ldr	r0, [pc, #272]	; (8000700 <LED_blinky+0x14c>)
 80005f0:	f001 f88f 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT3_LED_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <LED_blinky+0x14c>)
 80005fc:	f001 f889 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000600:	20fa      	movs	r0, #250	; 0xfa
 8000602:	f000 fb53 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT3_LED_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	483c      	ldr	r0, [pc, #240]	; (8000700 <LED_blinky+0x14c>)
 800060e:	f001 f880 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT4_LED_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000618:	4839      	ldr	r0, [pc, #228]	; (8000700 <LED_blinky+0x14c>)
 800061a:	f001 f87a 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800061e:	20fa      	movs	r0, #250	; 0xfa
 8000620:	f000 fb44 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT4_LED_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	4835      	ldr	r0, [pc, #212]	; (8000700 <LED_blinky+0x14c>)
 800062c:	f001 f871 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT5_LED_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	4832      	ldr	r0, [pc, #200]	; (8000700 <LED_blinky+0x14c>)
 8000638:	f001 f86b 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	; 0xfa
 800063e:	f000 fb35 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT5_LED_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000648:	482d      	ldr	r0, [pc, #180]	; (8000700 <LED_blinky+0x14c>)
 800064a:	f001 f862 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT6_LED_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000654:	482a      	ldr	r0, [pc, #168]	; (8000700 <LED_blinky+0x14c>)
 8000656:	f001 f85c 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800065a:	20fa      	movs	r0, #250	; 0xfa
 800065c:	f000 fb26 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT6_LED_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000666:	4826      	ldr	r0, [pc, #152]	; (8000700 <LED_blinky+0x14c>)
 8000668:	f001 f853 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2102      	movs	r1, #2
 8000670:	4824      	ldr	r0, [pc, #144]	; (8000704 <LED_blinky+0x150>)
 8000672:	f001 f84e 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000676:	20fa      	movs	r0, #250	; 0xfa
 8000678:	f000 fb18 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2102      	movs	r1, #2
 8000680:	4820      	ldr	r0, [pc, #128]	; (8000704 <LED_blinky+0x150>)
 8000682:	f001 f846 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, _60A_CKT2_LED_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2104      	movs	r1, #4
 800068a:	481e      	ldr	r0, [pc, #120]	; (8000704 <LED_blinky+0x150>)
 800068c:	f001 f841 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000690:	20fa      	movs	r0, #250	; 0xfa
 8000692:	f000 fb0b 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, _60A_CKT2_LED_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	481a      	ldr	r0, [pc, #104]	; (8000704 <LED_blinky+0x150>)
 800069c:	f001 f839 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <LED_blinky+0x150>)
 80006a8:	f001 f833 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80006ac:	20fa      	movs	r0, #250	; 0xfa
 80006ae:	f000 fafd 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	4812      	ldr	r0, [pc, #72]	; (8000704 <LED_blinky+0x150>)
 80006ba:	f001 f82a 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c4:	480f      	ldr	r0, [pc, #60]	; (8000704 <LED_blinky+0x150>)
 80006c6:	f001 f824 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80006ca:	20fa      	movs	r0, #250	; 0xfa
 80006cc:	f000 faee 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <LED_blinky+0x150>)
 80006d8:	f001 f81b 	bl	8001712 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <LED_blinky+0x154>)
 80006e4:	f001 f815 	bl	8001712 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	f000 fade 	bl	8000cac <HAL_Delay>
  HAL_GPIO_WritePin(HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <LED_blinky+0x154>)
 80006f8:	f001 f80b 	bl	8001712 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020000 	.word	0x40020000
 8000704:	40020400 	.word	0x40020400
 8000708:	40020800 	.word	0x40020800

0800070c <testFunc>:

void testFunc(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i=0; i<10; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	e03a      	b.n	800078e <testFunc+0x82>
  {
    HAL_GPIO_WritePin(GPIOB, UV_TO_INV_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071e:	4820      	ldr	r0, [pc, #128]	; (80007a0 <testFunc+0x94>)
 8000720:	f000 fff7 	bl	8001712 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072a:	481d      	ldr	r0, [pc, #116]	; (80007a0 <testFunc+0x94>)
 800072c:	f000 fff1 	bl	8001712 <HAL_GPIO_WritePin>
    HAL_Delay(3000);
 8000730:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000734:	f000 faba 	bl	8000cac <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, UV_TO_INV_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073e:	4818      	ldr	r0, [pc, #96]	; (80007a0 <testFunc+0x94>)
 8000740:	f000 ffe7 	bl	8001712 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074a:	4815      	ldr	r0, [pc, #84]	; (80007a0 <testFunc+0x94>)
 800074c:	f000 ffe1 	bl	8001712 <HAL_GPIO_WritePin>


    HAL_GPIO_WritePin(GPIOB, OV_TO_CHGR_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <testFunc+0x94>)
 8000758:	f000 ffdb 	bl	8001712 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <testFunc+0x94>)
 8000764:	f000 ffd5 	bl	8001712 <HAL_GPIO_WritePin>
    HAL_Delay(3000);
 8000768:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800076c:	f000 fa9e 	bl	8000cac <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, OV_TO_CHGR_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000776:	480a      	ldr	r0, [pc, #40]	; (80007a0 <testFunc+0x94>)
 8000778:	f000 ffcb 	bl	8001712 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <testFunc+0x94>)
 8000784:	f000 ffc5 	bl	8001712 <HAL_GPIO_WritePin>
  for(i=0; i<10; i++)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3301      	adds	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b09      	cmp	r3, #9
 8000792:	d9c1      	bls.n	8000718 <testFunc+0xc>
  }
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40020400 	.word	0x40020400

080007a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b092      	sub	sp, #72	; 0x48
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2234      	movs	r2, #52	; 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fd6c 	bl	8002290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <SystemClock_Config+0x8c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80007ce:	4a18      	ldr	r2, [pc, #96]	; (8000830 <SystemClock_Config+0x8c>)
 80007d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007d6:	2303      	movs	r3, #3
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	2310      	movs	r3, #16
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 ffa8 	bl	8001744 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x5a>
    {
      Error_Handler();
 80007fa:	f000 f907 	bl	8000a0c <Error_Handler>
    }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	603b      	str	r3, [r7, #0]
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000802:	2302      	movs	r3, #2
 8000804:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000806:	23b0      	movs	r3, #176	; 0xb0
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fac4 	bl	8001da4 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x82>
    {
      Error_Handler();
 8000822:	f000 f8f3 	bl	8000a0c <Error_Handler>
    }
}
 8000826:	bf00      	nop
 8000828:	3748      	adds	r7, #72	; 0x48
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40007000 	.word	0x40007000

08000834 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc.Instance = ADC1;
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_ADC_Init+0xa8>)
 8000846:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <MX_ADC_Init+0xac>)
 8000848:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_ADC_Init+0xa8>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_ADC_Init+0xa8>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_ADC_Init+0xa8>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_ADC_Init+0xa8>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_ADC_Init+0xa8>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_ADC_Init+0xa8>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_ADC_Init+0xa8>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_ADC_Init+0xa8>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_ADC_Init+0xa8>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_ADC_Init+0xa8>)
 8000884:	2201      	movs	r2, #1
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_ADC_Init+0xa8>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_ADC_Init+0xa8>)
 8000892:	2210      	movs	r2, #16
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_ADC_Init+0xa8>)
 8000898:	2200      	movs	r2, #0
 800089a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_ADC_Init+0xa8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_ADC_Init+0xa8>)
 80008a6:	f000 fa23 	bl	8000cf0 <HAL_ADC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC_Init+0x80>
    {
      Error_Handler();
 80008b0:	f000 f8ac 	bl	8000a0c <Error_Handler>
    }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_ADC_Init+0xa8>)
 80008c6:	f000 fb59 	bl	8000f7c <HAL_ADC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC_Init+0xa0>
    {
      Error_Handler();
 80008d0:	f000 f89c 	bl	8000a0c <Error_Handler>
    }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000028 	.word	0x20000028
 80008e0:	40012400 	.word	0x40012400

080008e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b40      	ldr	r3, [pc, #256]	; (80009fc <MX_GPIO_Init+0x118>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a3f      	ldr	r2, [pc, #252]	; (80009fc <MX_GPIO_Init+0x118>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <MX_GPIO_Init+0x118>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <MX_GPIO_Init+0x118>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a39      	ldr	r2, [pc, #228]	; (80009fc <MX_GPIO_Init+0x118>)
 8000918:	f043 0320 	orr.w	r3, r3, #32
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b37      	ldr	r3, [pc, #220]	; (80009fc <MX_GPIO_Init+0x118>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f003 0320 	and.w	r3, r3, #32
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b34      	ldr	r3, [pc, #208]	; (80009fc <MX_GPIO_Init+0x118>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a33      	ldr	r2, [pc, #204]	; (80009fc <MX_GPIO_Init+0x118>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_GPIO_Init+0x118>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_GPIO_Init+0x118>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <MX_GPIO_Init+0x118>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_GPIO_Init+0x118>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000960:	4827      	ldr	r0, [pc, #156]	; (8000a00 <MX_GPIO_Init+0x11c>)
 8000962:	f000 fed6 	bl	8001712 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin|_60A_CKT2_LED_Pin|UV_TO_INV_Pin|OV_TO_CHGR_Pin
 8000966:	2200      	movs	r2, #0
 8000968:	f643 7126 	movw	r1, #16166	; 0x3f26
 800096c:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x120>)
 800096e:	f000 fed0 	bl	8001712 <HAL_GPIO_WritePin>
		    |GV_CLOSE_PULSE_Pin|GV_OPEN_PULSE_Pin|DEBUG_LED_Pin|UV_INDICATE_LED_Pin
		    |OV_INDICATE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin|_30A_CKT2_LED_Pin|_30A_CKT3_LED_Pin|_30A_CKT4_LED_Pin
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8000978:	4823      	ldr	r0, [pc, #140]	; (8000a08 <MX_GPIO_Init+0x124>)
 800097a:	f000 feca 	bl	8001712 <HAL_GPIO_WritePin>
		    |_30A_CKT5_LED_Pin|_30A_CKT6_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : HEATER_EN_Pin */
  GPIO_InitStruct.Pin = HEATER_EN_Pin;
 800097e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HEATER_EN_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	481a      	ldr	r0, [pc, #104]	; (8000a00 <MX_GPIO_Init+0x11c>)
 8000998:	f000 fd24 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_INPUT_Pin OV_INPUT_Pin */
  GPIO_InitStruct.Pin = UV_INPUT_Pin|OV_INPUT_Pin;
 800099c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x11c>)
 80009b2:	f000 fd17 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : _60A_CKT1_LED_Pin _60A_CKT2_LED_Pin UV_TO_INV_Pin OV_TO_CHGR_Pin
                           GV_CLOSE_PULSE_Pin GV_OPEN_PULSE_Pin DEBUG_LED_Pin UV_INDICATE_LED_Pin
                           OV_INDICATE_LED_Pin */
  GPIO_InitStruct.Pin = _60A_CKT1_LED_Pin|_60A_CKT2_LED_Pin|UV_TO_INV_Pin|OV_TO_CHGR_Pin
 80009b6:	f643 7326 	movw	r3, #16166	; 0x3f26
 80009ba:	617b      	str	r3, [r7, #20]
      |GV_CLOSE_PULSE_Pin|GV_OPEN_PULSE_Pin|DEBUG_LED_Pin|UV_INDICATE_LED_Pin
      |OV_INDICATE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_GPIO_Init+0x120>)
 80009d0:	f000 fd08 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : _30A_CKT1_LED_Pin _30A_CKT2_LED_Pin _30A_CKT3_LED_Pin _30A_CKT4_LED_Pin
                           _30A_CKT5_LED_Pin _30A_CKT6_LED_Pin */
  GPIO_InitStruct.Pin = _30A_CKT1_LED_Pin|_30A_CKT2_LED_Pin|_30A_CKT3_LED_Pin|_30A_CKT4_LED_Pin
 80009d4:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 80009d8:	617b      	str	r3, [r7, #20]
      |_30A_CKT5_LED_Pin|_30A_CKT6_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_GPIO_Init+0x124>)
 80009ee:	f000 fcf9 	bl	80013e4 <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020400 	.word	0x40020400
 8000a08:	40020000 	.word	0x40020000

08000a0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_MspInit+0x58>)
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <HAL_MspInit+0x58>)
 8000a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a28:	6253      	str	r3, [r2, #36]	; 0x24
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_MspInit+0x58>)
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_MspInit+0x58>)
 8000a38:	6a1b      	ldr	r3, [r3, #32]
 8000a3a:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <HAL_MspInit+0x58>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6213      	str	r3, [r2, #32]
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_MspInit+0x58>)
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_MspInit+0x58>)
 8000a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_MspInit+0x58>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6253      	str	r3, [r2, #36]	; 0x24
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_MspInit+0x58>)
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <HAL_ADC_MspInit+0xa4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d13c      	bne.n	8000b10 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	4a20      	ldr	r2, [pc, #128]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa0:	6213      	str	r3, [r2, #32]
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_ADC_MspInit+0xa8>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB14     ------> ADC_IN20
    PB15     ------> ADC_IN21
    */
    GPIO_InitStruct.Pin = _30A_CKT6_SNS_Pin|_30A_CKT5_SNS_Pin|_30A_CKT4_SNS_Pin|_30A_CKT3_SNS_Pin
 8000ade:	23ff      	movs	r3, #255	; 0xff
 8000ae0:	617b      	str	r3, [r7, #20]
                          |_30A_CKT2_SNS_Pin|_30A_CKT1_SNS_Pin|_60A_CKT2_SNS_Pin|_60A_CKT1_SNS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <HAL_ADC_MspInit+0xac>)
 8000af2:	f000 fc77 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_PCBA_Pin|NTC_SHUNTS_Pin;
 8000af6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <HAL_ADC_MspInit+0xb0>)
 8000b0c:	f000 fc6a 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40012400 	.word	0x40012400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 f881 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000baa:	f7ff ffe4 	bl	8000b76 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f001 fb4b 	bl	8002248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff fc67 	bl	8000484 <main>
  bx lr
 8000bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc0:	080022e4 	.word	0x080022e4
  ldr r2, =_sbss
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc8:	20000080 	.word	0x20000080

08000bcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_IRQHandler>

08000bce <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fbcf 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f80e 	bl	8000c00 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf0:	f7ff ff12 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_InitTick+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d022      	beq.n	8000c5a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_InitTick+0x6c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fbce 	bl	80013ca <HAL_SYSTICK_Config>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10f      	bne.n	8000c54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	d809      	bhi.n	8000c4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c42:	f000 fba6 	bl	8001392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_InitTick+0x70>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e007      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e004      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e001      	b.n	8000c5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2000007c 	.word	0x2000007c
 8000c94:	20000008 	.word	0x20000008

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <HAL_GetTick+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	2000007c 	.word	0x2000007c

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff fff0 	bl	8000c98 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d004      	beq.n	8000cd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_Delay+0x40>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd0:	bf00      	nop
 8000cd2:	f7ff ffe1 	bl	8000c98 <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d8f7      	bhi.n	8000cd2 <HAL_Delay+0x26>
  {
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	; 0x38
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e127      	b.n	8000f60 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d115      	bne.n	8000d4a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	4b8e      	ldr	r3, [pc, #568]	; (8000f68 <HAL_ADC_Init+0x278>)
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	4a8d      	ldr	r2, [pc, #564]	; (8000f68 <HAL_ADC_Init+0x278>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6213      	str	r3, [r2, #32]
 8000d38:	4b8b      	ldr	r3, [pc, #556]	; (8000f68 <HAL_ADC_Init+0x278>)
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fe95 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 80ff 	bne.w	8000f56 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d60:	f023 0302 	bic.w	r3, r3, #2
 8000d64:	f043 0202 	orr.w	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000d6c:	4b7f      	ldr	r3, [pc, #508]	; (8000f6c <HAL_ADC_Init+0x27c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	497c      	ldr	r1, [pc, #496]	; (8000f6c <HAL_ADC_Init+0x27c>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d86:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000daa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000db0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000dd2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dde:	2b10      	cmp	r3, #16
 8000de0:	d007      	beq.n	8000df2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000dea:	4313      	orrs	r3, r2
 8000dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dee:	4313      	orrs	r3, r2
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfc:	2b40      	cmp	r3, #64	; 0x40
 8000dfe:	d04f      	beq.n	8000ea0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e06:	4313      	orrs	r3, r2
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e12:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	6912      	ldr	r2, [r2, #16]
 8000e18:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000e1c:	d003      	beq.n	8000e26 <HAL_ADC_Init+0x136>
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6912      	ldr	r2, [r2, #16]
 8000e22:	2a01      	cmp	r2, #1
 8000e24:	d102      	bne.n	8000e2c <HAL_ADC_Init+0x13c>
 8000e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2a:	e000      	b.n	8000e2e <HAL_ADC_Init+0x13e>
 8000e2c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e2e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e32:	4313      	orrs	r3, r2
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d125      	bne.n	8000e8c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d114      	bne.n	8000e74 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000e54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	fa92 f2a2 	rbit	r2, r2
 8000e5c:	617a      	str	r2, [r7, #20]
  return result;
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	4093      	lsls	r3, r2
 8000e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
 8000e72:	e00b      	b.n	8000e8c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	f043 0220 	orr.w	r2, r3, #32
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e84:	f043 0201 	orr.w	r2, r3, #1
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <HAL_ADC_Init+0x280>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <HAL_ADC_Init+0x284>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ebc:	d003      	beq.n	8000ec6 <HAL_ADC_Init+0x1d6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d119      	bne.n	8000efa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000eda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	fa92 f2a2 	rbit	r2, r2
 8000ee2:	60fa      	str	r2, [r7, #12]
  return result;
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	fab2 f282 	clz	r2, r2
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	fa03 f202 	lsl.w	r2, r3, r2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef8:	e007      	b.n	8000f0a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_ADC_Init+0x288>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d10b      	bne.n	8000f32 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f023 0303 	bic.w	r3, r3, #3
 8000f28:	f043 0201 	orr.w	r2, r3, #1
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f30:	e014      	b.n	8000f5c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f023 0312 	bic.w	r3, r3, #18
 8000f3a:	f043 0210 	orr.w	r2, r3, #16
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f46:	f043 0201 	orr.w	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f54:	e002      	b.n	8000f5c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3738      	adds	r7, #56	; 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40012700 	.word	0x40012700
 8000f70:	fcfc16ff 	.word	0xfcfc16ff
 8000f74:	c0fff18d 	.word	0xc0fff18d
 8000f78:	bf80fffe 	.word	0xbf80fffe

08000f7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <HAL_ADC_ConfigChannel+0x20>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e134      	b.n	8001206 <HAL_ADC_ConfigChannel+0x28a>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b06      	cmp	r3, #6
 8000faa:	d81c      	bhi.n	8000fe6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	3b05      	subs	r3, #5
 8000fbe:	221f      	movs	r2, #31
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4019      	ands	r1, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3b05      	subs	r3, #5
 8000fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe4:	e07e      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d81c      	bhi.n	8001028 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	3b23      	subs	r3, #35	; 0x23
 8001000:	221f      	movs	r2, #31
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	4019      	ands	r1, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	3b23      	subs	r3, #35	; 0x23
 800101a:	fa00 f203 	lsl.w	r2, r0, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
 8001026:	e05d      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b12      	cmp	r3, #18
 800102e:	d81c      	bhi.n	800106a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3b41      	subs	r3, #65	; 0x41
 8001042:	221f      	movs	r2, #31
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4019      	ands	r1, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	3b41      	subs	r3, #65	; 0x41
 800105c:	fa00 f203 	lsl.w	r2, r0, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
 8001068:	e03c      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b18      	cmp	r3, #24
 8001070:	d81c      	bhi.n	80010ac <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b5f      	subs	r3, #95	; 0x5f
 8001084:	221f      	movs	r2, #31
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	4019      	ands	r1, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	3b5f      	subs	r3, #95	; 0x5f
 800109e:	fa00 f203 	lsl.w	r2, r0, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
 80010aa:	e01b      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3b7d      	subs	r3, #125	; 0x7d
 80010be:	221f      	movs	r2, #31
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4019      	ands	r1, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	3b7d      	subs	r3, #125	; 0x7d
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	d81a      	bhi.n	8001122 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6959      	ldr	r1, [r3, #20]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	2207      	movs	r2, #7
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	4019      	ands	r1, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	6898      	ldr	r0, [r3, #8]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	e042      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b13      	cmp	r3, #19
 8001128:	d81c      	bhi.n	8001164 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6919      	ldr	r1, [r3, #16]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	3b1e      	subs	r3, #30
 800113c:	2207      	movs	r2, #7
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	4019      	ands	r1, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6898      	ldr	r0, [r3, #8]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	3b1e      	subs	r3, #30
 8001156:	fa00 f203 	lsl.w	r2, r0, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	e021      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b1a      	cmp	r3, #26
 800116a:	d81c      	bhi.n	80011a6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68d9      	ldr	r1, [r3, #12]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	3b3c      	subs	r3, #60	; 0x3c
 800117e:	2207      	movs	r2, #7
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4019      	ands	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	3b3c      	subs	r3, #60	; 0x3c
 8001198:	fa00 f203 	lsl.w	r2, r0, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	e000      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80011a6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b10      	cmp	r3, #16
 80011ae:	d003      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011b4:	2b11      	cmp	r3, #17
 80011b6:	d121      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_ADC_ConfigChannel+0x294>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d11b      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_ADC_ConfigChannel+0x294>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_ADC_ConfigChannel+0x294>)
 80011ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ce:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b10      	cmp	r3, #16
 80011d6:	d111      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_ADC_ConfigChannel+0x298>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_ADC_ConfigChannel+0x29c>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9a      	lsrs	r2, r3, #18
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80011ee:	e002      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f9      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40012700 	.word	0x40012700
 8001214:	20000000 	.word	0x20000000
 8001218:	431bde83 	.word	0x431bde83

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff90 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff49 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff5e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffb0 	bl	8001338 <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013fa:	e154      	b.n	80016a6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8146 	beq.w	80016a0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001428:	2b02      	cmp	r3, #2
 800142a:	d130      	bne.n	800148e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001462:	2201      	movs	r2, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 0201 	and.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d017      	beq.n	80014ca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d123      	bne.n	800151e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0203 	and.w	r2, r3, #3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80a0 	beq.w	80016a0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_GPIO_Init+0x2e0>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_GPIO_Init+0x2e0>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_GPIO_Init+0x2e0>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001578:	4a53      	ldr	r2, [pc, #332]	; (80016c8 <HAL_GPIO_Init+0x2e4>)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_GPIO_Init+0x2e8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d019      	beq.n	80015d8 <HAL_GPIO_Init+0x1f4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_GPIO_Init+0x2ec>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d013      	beq.n	80015d4 <HAL_GPIO_Init+0x1f0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a49      	ldr	r2, [pc, #292]	; (80016d4 <HAL_GPIO_Init+0x2f0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d00d      	beq.n	80015d0 <HAL_GPIO_Init+0x1ec>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a48      	ldr	r2, [pc, #288]	; (80016d8 <HAL_GPIO_Init+0x2f4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d007      	beq.n	80015cc <HAL_GPIO_Init+0x1e8>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a47      	ldr	r2, [pc, #284]	; (80016dc <HAL_GPIO_Init+0x2f8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d101      	bne.n	80015c8 <HAL_GPIO_Init+0x1e4>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e008      	b.n	80015da <HAL_GPIO_Init+0x1f6>
 80015c8:	2305      	movs	r3, #5
 80015ca:	e006      	b.n	80015da <HAL_GPIO_Init+0x1f6>
 80015cc:	2303      	movs	r3, #3
 80015ce:	e004      	b.n	80015da <HAL_GPIO_Init+0x1f6>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e002      	b.n	80015da <HAL_GPIO_Init+0x1f6>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_GPIO_Init+0x1f6>
 80015d8:	2300      	movs	r3, #0
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	f002 0203 	and.w	r2, r2, #3
 80015e0:	0092      	lsls	r2, r2, #2
 80015e2:	4093      	lsls	r3, r2
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015ea:	4937      	ldr	r1, [pc, #220]	; (80016c8 <HAL_GPIO_Init+0x2e4>)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f8:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800161c:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001622:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001646:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_GPIO_Init+0x2fc>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f47f aea3 	bne.w	80013fc <HAL_GPIO_Init+0x18>
  }
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e001      	b.n	8001706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	807b      	strh	r3, [r7, #2]
 800171e:	4613      	mov	r3, r2
 8001720:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001722:	787b      	ldrb	r3, [r7, #1]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001728:	887a      	ldrh	r2, [r7, #2]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800172e:	e003      	b.n	8001738 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	041a      	lsls	r2, r3, #16
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e31d      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4b94      	ldr	r3, [pc, #592]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	4b91      	ldr	r3, [pc, #580]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d07b      	beq.n	800186e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b08      	cmp	r3, #8
 800177a:	d006      	beq.n	800178a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d10f      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b87      	ldr	r3, [pc, #540]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06a      	beq.n	800186c <HAL_RCC_OscConfig+0x128>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d166      	bne.n	800186c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e2f7      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x74>
 80017aa:	4b7f      	ldr	r3, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a7e      	ldr	r2, [pc, #504]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e02d      	b.n	8001814 <HAL_RCC_OscConfig+0xd0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10c      	bne.n	80017da <HAL_RCC_OscConfig+0x96>
 80017c0:	4b79      	ldr	r3, [pc, #484]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a78      	ldr	r2, [pc, #480]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a75      	ldr	r2, [pc, #468]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e01c      	b.n	8001814 <HAL_RCC_OscConfig+0xd0>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0xb8>
 80017e2:	4b71      	ldr	r3, [pc, #452]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a70      	ldr	r2, [pc, #448]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b6e      	ldr	r3, [pc, #440]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6d      	ldr	r2, [pc, #436]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0xd0>
 80017fc:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a69      	ldr	r2, [pc, #420]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a66      	ldr	r2, [pc, #408]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fa3c 	bl	8000c98 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fa38 	bl	8000c98 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e2ad      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0xe0>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fa28 	bl	8000c98 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fa24 	bl	8000c98 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e299      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800185e:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x108>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d05a      	beq.n	8001930 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d119      	bne.n	80018ba <HAL_RCC_OscConfig+0x176>
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d116      	bne.n	80018ba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_OscConfig+0x160>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e276      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	493d      	ldr	r1, [pc, #244]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b8:	e03a      	b.n	8001930 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d020      	beq.n	8001904 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_RCC_OscConfig+0x268>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f9e6 	bl	8000c98 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff f9e2 	bl	8000c98 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e257      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	492a      	ldr	r1, [pc, #168]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
 8001902:	e015      	b.n	8001930 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_RCC_OscConfig+0x268>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff f9c5 	bl	8000c98 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff f9c1 	bl	8000c98 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e236      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80b8 	beq.w	8001aae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d170      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x218>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e21a      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1a      	ldr	r2, [r3, #32]
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001968:	429a      	cmp	r2, r3
 800196a:	d921      	bls.n	80019b0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fc09 	bl	8002188 <RCC_SetFlashLatencyFromMSIRange>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e208      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	061b      	lsls	r3, r3, #24
 80019a0:	4901      	ldr	r1, [pc, #4]	; (80019a8 <HAL_RCC_OscConfig+0x264>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
 80019a6:	e020      	b.n	80019ea <HAL_RCC_OscConfig+0x2a6>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b0:	4b99      	ldr	r3, [pc, #612]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4996      	ldr	r1, [pc, #600]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b95      	ldr	r3, [pc, #596]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	061b      	lsls	r3, r3, #24
 80019d0:	4991      	ldr	r1, [pc, #580]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fbd4 	bl	8002188 <RCC_SetFlashLatencyFromMSIRange>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1d3      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	0b5b      	lsrs	r3, r3, #13
 80019f0:	3301      	adds	r3, #1
 80019f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80019fa:	4a87      	ldr	r2, [pc, #540]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 80019fc:	6892      	ldr	r2, [r2, #8]
 80019fe:	0912      	lsrs	r2, r2, #4
 8001a00:	f002 020f 	and.w	r2, r2, #15
 8001a04:	4985      	ldr	r1, [pc, #532]	; (8001c1c <HAL_RCC_OscConfig+0x4d8>)
 8001a06:	5c8a      	ldrb	r2, [r1, r2]
 8001a08:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a0a:	4a85      	ldr	r2, [pc, #532]	; (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a0e:	4b85      	ldr	r3, [pc, #532]	; (8001c24 <HAL_RCC_OscConfig+0x4e0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f8f4 	bl	8000c00 <HAL_InitTick>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d045      	beq.n	8001aae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	e1b5      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d029      	beq.n	8001a82 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x4e4>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff f930 	bl	8000c98 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f92c 	bl	8000c98 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1a1      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	496c      	ldr	r1, [pc, #432]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	4967      	ldr	r1, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a82:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <HAL_RCC_OscConfig+0x4e4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff f906 	bl	8000c98 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a90:	f7ff f902 	bl	8000c98 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e177      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d030      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f8e6 	bl	8000c98 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f8e2 	bl	8000c98 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e157      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ae2:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x38c>
 8001aee:	e015      	b.n	8001b1c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af0:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <HAL_RCC_OscConfig+0x4e8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff f8cf 	bl	8000c98 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff f8cb 	bl	8000c98 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e140      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b10:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80b5 	beq.w	8001c94 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10d      	bne.n	8001b56 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	4a36      	ldr	r2, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6253      	str	r3, [r2, #36]	; 0x24
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b52:	2301      	movs	r3, #1
 8001b54:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d118      	bne.n	8001b94 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a32      	ldr	r2, [pc, #200]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f893 	bl	8000c98 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff f88f 	bl	8000c98 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	; 0x64
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e104      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x466>
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ba8:	e02d      	b.n	8001c06 <HAL_RCC_OscConfig+0x4c2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x488>
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bbc:	6353      	str	r3, [r2, #52]	; 0x34
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bc8:	6353      	str	r3, [r2, #52]	; 0x34
 8001bca:	e01c      	b.n	8001c06 <HAL_RCC_OscConfig+0x4c2>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d10c      	bne.n	8001bee <HAL_RCC_OscConfig+0x4aa>
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bde:	6353      	str	r3, [r2, #52]	; 0x34
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6353      	str	r3, [r2, #52]	; 0x34
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_OscConfig+0x4c2>
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf8:	6353      	str	r3, [r2, #52]	; 0x34
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfe:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_RCC_OscConfig+0x4d4>)
 8001c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c04:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d024      	beq.n	8001c58 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f843 	bl	8000c98 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c14:	e019      	b.n	8001c4a <HAL_RCC_OscConfig+0x506>
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	080022c4 	.word	0x080022c4
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000004 	.word	0x20000004
 8001c28:	42470020 	.word	0x42470020
 8001c2c:	42470680 	.word	0x42470680
 8001c30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f830 	bl	8000c98 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e0a3      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0ee      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4f0>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7ff f81e 	bl	8000c98 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff f81a 	bl	8000c98 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e08d      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c76:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ee      	bne.n	8001c60 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c88:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	4a43      	ldr	r2, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d079      	beq.n	8001d90 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d056      	beq.n	8001d50 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d13b      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCC_OscConfig+0x65c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fff2 	bl	8000c98 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe ffee 	bl	8000c98 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e063      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	4319      	orrs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	430b      	orrs	r3, r1
 8001cee:	492b      	ldr	r1, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x65c>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7fe ffcd 	bl	8000c98 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d02:	f7fe ffc9 	bl	8000c98 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e03e      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x5be>
 8001d20:	e036      	b.n	8001d90 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_RCC_OscConfig+0x65c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe ffb6 	bl	8000c98 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe ffb2 	bl	8000c98 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e027      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x5ec>
 8001d4e:	e01f      	b.n	8001d90 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e01a      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCC_OscConfig+0x658>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	42470060 	.word	0x42470060

08001da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e11a      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b8f      	ldr	r3, [pc, #572]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d919      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x34>
 8001dcc:	4b8a      	ldr	r3, [pc, #552]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a89      	ldr	r2, [pc, #548]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b87      	ldr	r3, [pc, #540]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 0201 	bic.w	r2, r3, #1
 8001de0:	4985      	ldr	r1, [pc, #532]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de8:	4b83      	ldr	r3, [pc, #524]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0f9      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e06:	4b7d      	ldr	r3, [pc, #500]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	497a      	ldr	r1, [pc, #488]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 808e 	beq.w	8001f42 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e2e:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d121      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0d7      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e46:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d115      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0cb      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0bf      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e6e:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0b7      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	4b5f      	ldr	r3, [pc, #380]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	495c      	ldr	r1, [pc, #368]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e90:	f7fe ff02 	bl	8000c98 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d112      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7fe fefa 	bl	8000c98 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e09b      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb6:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d1ee      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xfc>
 8001ec2:	e03e      	b.n	8001f42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d112      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ece:	f7fe fee3 	bl	8000c98 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e084      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee4:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_ClockConfig+0x12a>
 8001ef0:	e027      	b.n	8001f42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d11d      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7fe fecc 	bl	8000c98 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e06d      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d1ee      	bne.n	8001efc <HAL_RCC_ClockConfig+0x158>
 8001f1e:	e010      	b.n	8001f42 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe feba 	bl	8000c98 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e05b      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ee      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d219      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d105      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1be>
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0201 	bic.w	r2, r3, #1
 8001f6a:	4923      	ldr	r1, [pc, #140]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCC_ClockConfig+0x254>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e034      	b.n	8001fee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4917      	ldr	r1, [pc, #92]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	490f      	ldr	r1, [pc, #60]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fc2:	f000 f823 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_RCC_ClockConfig+0x258>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	490b      	ldr	r1, [pc, #44]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001fd4:	5ccb      	ldrb	r3, [r1, r3]
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x264>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe0c 	bl	8000c00 <HAL_InitTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fec:	7afb      	ldrb	r3, [r7, #11]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00
 8001ffc:	40023800 	.word	0x40023800
 8002000:	080022c4 	.word	0x080022c4
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002010:	b08e      	sub	sp, #56	; 0x38
 8002012:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002014:	4b58      	ldr	r3, [pc, #352]	; (8002178 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d00d      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 8002024:	2b0c      	cmp	r3, #12
 8002026:	f200 8092 	bhi.w	800214e <HAL_RCC_GetSysClockFreq+0x142>
 800202a:	2b04      	cmp	r3, #4
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x28>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x2e>
 8002032:	e08c      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002034:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_RCC_GetSysClockFreq+0x170>)
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002038:	e097      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800203a:	4b51      	ldr	r3, [pc, #324]	; (8002180 <HAL_RCC_GetSysClockFreq+0x174>)
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800203e:	e094      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	0c9b      	lsrs	r3, r3, #18
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <HAL_RCC_GetSysClockFreq+0x178>)
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	0d9b      	lsrs	r3, r3, #22
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	3301      	adds	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_GetSysClockFreq+0x16c>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d021      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	2200      	movs	r2, #0
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	61fa      	str	r2, [r7, #28]
 800206e:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_RCC_GetSysClockFreq+0x174>)
 8002070:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002074:	464a      	mov	r2, r9
 8002076:	fb03 f202 	mul.w	r2, r3, r2
 800207a:	2300      	movs	r3, #0
 800207c:	4644      	mov	r4, r8
 800207e:	fb04 f303 	mul.w	r3, r4, r3
 8002082:	4413      	add	r3, r2
 8002084:	4a3e      	ldr	r2, [pc, #248]	; (8002180 <HAL_RCC_GetSysClockFreq+0x174>)
 8002086:	4644      	mov	r4, r8
 8002088:	fba4 0102 	umull	r0, r1, r4, r2
 800208c:	440b      	add	r3, r1
 800208e:	4619      	mov	r1, r3
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	2200      	movs	r2, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	617a      	str	r2, [r7, #20]
 8002098:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800209c:	f7fe f86e 	bl	800017c <__aeabi_uldivmod>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4613      	mov	r3, r2
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
 80020a8:	e04e      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	2200      	movs	r2, #0
 80020ae:	469a      	mov	sl, r3
 80020b0:	4693      	mov	fp, r2
 80020b2:	4652      	mov	r2, sl
 80020b4:	465b      	mov	r3, fp
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	0159      	lsls	r1, r3, #5
 80020c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c4:	0150      	lsls	r0, r2, #5
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	ebb2 080a 	subs.w	r8, r2, sl
 80020ce:	eb63 090b 	sbc.w	r9, r3, fp
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020e6:	ebb2 0408 	subs.w	r4, r2, r8
 80020ea:	eb63 0509 	sbc.w	r5, r3, r9
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	00eb      	lsls	r3, r5, #3
 80020f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fc:	00e2      	lsls	r2, r4, #3
 80020fe:	4614      	mov	r4, r2
 8002100:	461d      	mov	r5, r3
 8002102:	eb14 030a 	adds.w	r3, r4, sl
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	eb45 030b 	adc.w	r3, r5, fp
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800211a:	4629      	mov	r1, r5
 800211c:	028b      	lsls	r3, r1, #10
 800211e:	4620      	mov	r0, r4
 8002120:	4629      	mov	r1, r5
 8002122:	4604      	mov	r4, r0
 8002124:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002128:	4601      	mov	r1, r0
 800212a:	028a      	lsls	r2, r1, #10
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	2200      	movs	r2, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	60fa      	str	r2, [r7, #12]
 8002138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800213c:	f7fe f81e 	bl	800017c <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4613      	mov	r3, r2
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800214c:	e00d      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	0b5b      	lsrs	r3, r3, #13
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	3301      	adds	r3, #1
 800215e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800216c:	4618      	mov	r0, r3
 800216e:	3738      	adds	r7, #56	; 0x38
 8002170:	46bd      	mov	sp, r7
 8002172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	00f42400 	.word	0x00f42400
 8002180:	016e3600 	.word	0x016e3600
 8002184:	080022b8 	.word	0x080022b8

08002188 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d12c      	bne.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e016      	b.n	80021e6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c2:	6253      	str	r3, [r2, #36]	; 0x24
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80021d8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80021ec:	d105      	bne.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x72>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80021f4:	d101      	bne.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80021f6:	2301      	movs	r3, #1
 80021f8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 0201 	bic.w	r2, r3, #1
 8002214:	490b      	ldr	r1, [pc, #44]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40007000 	.word	0x40007000
 8002244:	40023c00 	.word	0x40023c00

08002248 <__libc_init_array>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	2600      	movs	r6, #0
 800224c:	4d0c      	ldr	r5, [pc, #48]	; (8002280 <__libc_init_array+0x38>)
 800224e:	4c0d      	ldr	r4, [pc, #52]	; (8002284 <__libc_init_array+0x3c>)
 8002250:	1b64      	subs	r4, r4, r5
 8002252:	10a4      	asrs	r4, r4, #2
 8002254:	42a6      	cmp	r6, r4
 8002256:	d109      	bne.n	800226c <__libc_init_array+0x24>
 8002258:	f000 f822 	bl	80022a0 <_init>
 800225c:	2600      	movs	r6, #0
 800225e:	4d0a      	ldr	r5, [pc, #40]	; (8002288 <__libc_init_array+0x40>)
 8002260:	4c0a      	ldr	r4, [pc, #40]	; (800228c <__libc_init_array+0x44>)
 8002262:	1b64      	subs	r4, r4, r5
 8002264:	10a4      	asrs	r4, r4, #2
 8002266:	42a6      	cmp	r6, r4
 8002268:	d105      	bne.n	8002276 <__libc_init_array+0x2e>
 800226a:	bd70      	pop	{r4, r5, r6, pc}
 800226c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002270:	4798      	blx	r3
 8002272:	3601      	adds	r6, #1
 8002274:	e7ee      	b.n	8002254 <__libc_init_array+0xc>
 8002276:	f855 3b04 	ldr.w	r3, [r5], #4
 800227a:	4798      	blx	r3
 800227c:	3601      	adds	r6, #1
 800227e:	e7f2      	b.n	8002266 <__libc_init_array+0x1e>
 8002280:	080022dc 	.word	0x080022dc
 8002284:	080022dc 	.word	0x080022dc
 8002288:	080022dc 	.word	0x080022dc
 800228c:	080022e0 	.word	0x080022e0

08002290 <memset>:
 8002290:	4603      	mov	r3, r0
 8002292:	4402      	add	r2, r0
 8002294:	4293      	cmp	r3, r2
 8002296:	d100      	bne.n	800229a <memset+0xa>
 8002298:	4770      	bx	lr
 800229a:	f803 1b01 	strb.w	r1, [r3], #1
 800229e:	e7f9      	b.n	8002294 <memset+0x4>

080022a0 <_init>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr

080022ac <_fini>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	bf00      	nop
 80022b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b2:	bc08      	pop	{r3}
 80022b4:	469e      	mov	lr, r3
 80022b6:	4770      	bx	lr
