
STM32VanBattery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003648  08003648  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003650  08003650  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08003664  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003664  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009010  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193a  00000000  00000000  00029045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002a980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013dd3  00000000  00000000  0002bc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009feb  00000000  00000000  0003f9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f621  00000000  00000000  000499c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b4  00000000  00000000  000c9038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003614 	.word	0x08003614

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003614 	.word	0x08003614

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <main>:
void setup_pin_states(void);
void LED_blinky(void);
void testFunc(void);

int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	; 0x30
 8000488:	af00      	add	r7, sp, #0
  HAL_Init();
 800048a:	f000 fd78 	bl	8000f7e <HAL_Init>
  SystemClock_Config();
 800048e:	f000 f9f7 	bl	8000880 <SystemClock_Config>
  MX_GPIO_Init();
 8000492:	f000 fbad 	bl	8000bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000496:	f000 fb8d 	bl	8000bb4 <MX_DMA_Init>
  MX_ADC_Init();
 800049a:	f000 fa41 	bl	8000920 <MX_ADC_Init>
  MX_TIM2_Init();
 800049e:	f000 fb19 	bl	8000ad4 <MX_TIM2_Init>

  uint32_t adc_values[10];
  uint32_t openCktThreshold = 2100; // 2200 corresponds to 20V
 80004a2:	f640 0334 	movw	r3, #2100	; 0x834
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_values, 10);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	220a      	movs	r2, #10
 80004ac:	4619      	mov	r1, r3
 80004ae:	4865      	ldr	r0, [pc, #404]	; (8000644 <main+0x1c0>)
 80004b0:	f000 ff3c 	bl	800132c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80004b4:	4864      	ldr	r0, [pc, #400]	; (8000648 <main+0x1c4>)
 80004b6:	f002 fc21 	bl	8002cfc <HAL_TIM_Base_Start>

  setup_pin_states(); // initialize digital output pin states
 80004ba:	f000 f8cd 	bl	8000658 <setup_pin_states>
  LED_blinky(); //blinky on start up
 80004be:	f000 f933 	bl	8000728 <LED_blinky>
//  HAL_Delay(500);
//  HAL_GPIO_WritePin(GPIOB, GV_OPEN_PULSE_Pin, GPIO_PIN_RESET);

  while (1)
  {
    asm("nop"); // no-op for break point
 80004c2:	bf00      	nop

    // blink heart beat LED to indicate FW 'OK'
    HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2120      	movs	r1, #32
 80004c8:	4860      	ldr	r0, [pc, #384]	; (800064c <main+0x1c8>)
 80004ca:	f001 fe3c 	bl	8002146 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 80004ce:	20c8      	movs	r0, #200	; 0xc8
 80004d0:	f000 fdc4 	bl	800105c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2120      	movs	r1, #32
 80004d8:	485c      	ldr	r0, [pc, #368]	; (800064c <main+0x1c8>)
 80004da:	f001 fe34 	bl	8002146 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80004de:	2064      	movs	r0, #100	; 0x64
 80004e0:	f000 fdbc 	bl	800105c <HAL_Delay>

    if(HAL_GPIO_ReadPin(GPIOC, UV_INPUT_Pin) == GPIO_PIN_SET)
 80004e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e8:	4859      	ldr	r0, [pc, #356]	; (8000650 <main+0x1cc>)
 80004ea:	f001 fe15 	bl	8002118 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d106      	bne.n	8000502 <main+0x7e>
    {
//      HAL_GPIO_WritePin(GPIOB, GV_OPEN_PULSE_Pin, GPIO_PIN_SET);
//      HAL_Delay(500);
//      HAL_GPIO_WritePin(GPIOB, GV_OPEN_PULSE_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4854      	ldr	r0, [pc, #336]	; (800064c <main+0x1c8>)
 80004fc:	f001 fe23 	bl	8002146 <HAL_GPIO_WritePin>
 8000500:	e005      	b.n	800050e <main+0x8a>
    }
    else
      HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	4850      	ldr	r0, [pc, #320]	; (800064c <main+0x1c8>)
 800050a:	f001 fe1c 	bl	8002146 <HAL_GPIO_WritePin>

    if(HAL_GPIO_ReadPin(GPIOC, OV_INPUT_Pin) == GPIO_PIN_SET)
 800050e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000512:	484f      	ldr	r0, [pc, #316]	; (8000650 <main+0x1cc>)
 8000514:	f001 fe00 	bl	8002118 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d106      	bne.n	800052c <main+0xa8>
    {
      HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000524:	4849      	ldr	r0, [pc, #292]	; (800064c <main+0x1c8>)
 8000526:	f001 fe0e 	bl	8002146 <HAL_GPIO_WritePin>
 800052a:	e005      	b.n	8000538 <main+0xb4>
    }
    else
      HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000532:	4846      	ldr	r0, [pc, #280]	; (800064c <main+0x1c8>)
 8000534:	f001 fe07 	bl	8002146 <HAL_GPIO_WritePin>

    // sample and update ANALOG INPUTS
    // fuse status (valid range = 2.036V - 2.655V)
    if (adc_values[0] > openCktThreshold)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800053c:	429a      	cmp	r2, r3
 800053e:	d206      	bcs.n	800054e <main+0xca>
      HAL_GPIO_WritePin(GPIOA, _30A_CKT6_LED_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000546:	4843      	ldr	r0, [pc, #268]	; (8000654 <main+0x1d0>)
 8000548:	f001 fdfd 	bl	8002146 <HAL_GPIO_WritePin>
 800054c:	e005      	b.n	800055a <main+0xd6>
    else
      HAL_GPIO_WritePin(GPIOA, _30A_CKT6_LED_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000554:	483f      	ldr	r0, [pc, #252]	; (8000654 <main+0x1d0>)
 8000556:	f001 fdf6 	bl	8002146 <HAL_GPIO_WritePin>

    if (adc_values[1] > openCktThreshold)
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800055e:	429a      	cmp	r2, r3
 8000560:	d206      	bcs.n	8000570 <main+0xec>
      HAL_GPIO_WritePin(GPIOA, _30A_CKT5_LED_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000568:	483a      	ldr	r0, [pc, #232]	; (8000654 <main+0x1d0>)
 800056a:	f001 fdec 	bl	8002146 <HAL_GPIO_WritePin>
 800056e:	e005      	b.n	800057c <main+0xf8>
    else
      HAL_GPIO_WritePin(GPIOA, _30A_CKT5_LED_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	4837      	ldr	r0, [pc, #220]	; (8000654 <main+0x1d0>)
 8000578:	f001 fde5 	bl	8002146 <HAL_GPIO_WritePin>

    if (adc_values[2] > openCktThreshold)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000580:	429a      	cmp	r2, r3
 8000582:	d206      	bcs.n	8000592 <main+0x10e>
      HAL_GPIO_WritePin(GPIOA, _30A_CKT4_LED_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058a:	4832      	ldr	r0, [pc, #200]	; (8000654 <main+0x1d0>)
 800058c:	f001 fddb 	bl	8002146 <HAL_GPIO_WritePin>
 8000590:	e005      	b.n	800059e <main+0x11a>
    else
      HAL_GPIO_WritePin(GPIOA, _30A_CKT4_LED_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000598:	482e      	ldr	r0, [pc, #184]	; (8000654 <main+0x1d0>)
 800059a:	f001 fdd4 	bl	8002146 <HAL_GPIO_WritePin>

    if (adc_values[3] > openCktThreshold)
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d206      	bcs.n	80005b4 <main+0x130>
      HAL_GPIO_WritePin(GPIOA, _30A_CKT3_LED_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	4829      	ldr	r0, [pc, #164]	; (8000654 <main+0x1d0>)
 80005ae:	f001 fdca 	bl	8002146 <HAL_GPIO_WritePin>
 80005b2:	e005      	b.n	80005c0 <main+0x13c>
    else
      HAL_GPIO_WritePin(GPIOA, _30A_CKT3_LED_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	4826      	ldr	r0, [pc, #152]	; (8000654 <main+0x1d0>)
 80005bc:	f001 fdc3 	bl	8002146 <HAL_GPIO_WritePin>

    if (adc_values[4] > openCktThreshold)
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d206      	bcs.n	80005d6 <main+0x152>
      HAL_GPIO_WritePin(GPIOA, _30A_CKT2_LED_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ce:	4821      	ldr	r0, [pc, #132]	; (8000654 <main+0x1d0>)
 80005d0:	f001 fdb9 	bl	8002146 <HAL_GPIO_WritePin>
 80005d4:	e005      	b.n	80005e2 <main+0x15e>
    else
      HAL_GPIO_WritePin(GPIOA, _30A_CKT2_LED_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	481d      	ldr	r0, [pc, #116]	; (8000654 <main+0x1d0>)
 80005de:	f001 fdb2 	bl	8002146 <HAL_GPIO_WritePin>

    if (adc_values[5] > openCktThreshold)
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d206      	bcs.n	80005f8 <main+0x174>
      HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4818      	ldr	r0, [pc, #96]	; (8000654 <main+0x1d0>)
 80005f2:	f001 fda8 	bl	8002146 <HAL_GPIO_WritePin>
 80005f6:	e005      	b.n	8000604 <main+0x180>
    else
      HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fe:	4815      	ldr	r0, [pc, #84]	; (8000654 <main+0x1d0>)
 8000600:	f001 fda1 	bl	8002146 <HAL_GPIO_WritePin>

    if (adc_values[6] > openCktThreshold)
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000608:	429a      	cmp	r2, r3
 800060a:	d205      	bcs.n	8000618 <main+0x194>
      HAL_GPIO_WritePin(GPIOB, _60A_CKT2_LED_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2104      	movs	r1, #4
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0x1c8>)
 8000612:	f001 fd98 	bl	8002146 <HAL_GPIO_WritePin>
 8000616:	e004      	b.n	8000622 <main+0x19e>
    else
      HAL_GPIO_WritePin(GPIOB, _60A_CKT2_LED_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2104      	movs	r1, #4
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <main+0x1c8>)
 800061e:	f001 fd92 	bl	8002146 <HAL_GPIO_WritePin>

    if (adc_values[7] > openCktThreshold)
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000626:	429a      	cmp	r2, r3
 8000628:	d205      	bcs.n	8000636 <main+0x1b2>
      HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <main+0x1c8>)
 8000630:	f001 fd89 	bl	8002146 <HAL_GPIO_WritePin>
 8000634:	e745      	b.n	80004c2 <main+0x3e>
    else
      HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2102      	movs	r1, #2
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <main+0x1c8>)
 800063c:	f001 fd83 	bl	8002146 <HAL_GPIO_WritePin>
    asm("nop"); // no-op for break point
 8000640:	e73f      	b.n	80004c2 <main+0x3e>
 8000642:	bf00      	nop
 8000644:	20000028 	.word	0x20000028
 8000648:	200000c0 	.word	0x200000c0
 800064c:	40020400 	.word	0x40020400
 8000650:	40020800 	.word	0x40020800
 8000654:	40020000 	.word	0x40020000

08000658 <setup_pin_states>:
  }
}

void setup_pin_states(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000662:	482e      	ldr	r0, [pc, #184]	; (800071c <setup_pin_states+0xc4>)
 8000664:	f001 fd6f 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT2_LED_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066e:	482b      	ldr	r0, [pc, #172]	; (800071c <setup_pin_states+0xc4>)
 8000670:	f001 fd69 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT3_LED_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067a:	4828      	ldr	r0, [pc, #160]	; (800071c <setup_pin_states+0xc4>)
 800067c:	f001 fd63 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT4_LED_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000686:	4825      	ldr	r0, [pc, #148]	; (800071c <setup_pin_states+0xc4>)
 8000688:	f001 fd5d 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT5_LED_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	4822      	ldr	r0, [pc, #136]	; (800071c <setup_pin_states+0xc4>)
 8000694:	f001 fd57 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT6_LED_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069e:	481f      	ldr	r0, [pc, #124]	; (800071c <setup_pin_states+0xc4>)
 80006a0:	f001 fd51 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2102      	movs	r1, #2
 80006a8:	481d      	ldr	r0, [pc, #116]	; (8000720 <setup_pin_states+0xc8>)
 80006aa:	f001 fd4c 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, _60A_CKT2_LED_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2104      	movs	r1, #4
 80006b2:	481b      	ldr	r0, [pc, #108]	; (8000720 <setup_pin_states+0xc8>)
 80006b4:	f001 fd47 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006be:	4819      	ldr	r0, [pc, #100]	; (8000724 <setup_pin_states+0xcc>)
 80006c0:	f001 fd41 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	4815      	ldr	r0, [pc, #84]	; (8000720 <setup_pin_states+0xc8>)
 80006ca:	f001 fd3c 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, UV_TO_INV_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d4:	4812      	ldr	r0, [pc, #72]	; (8000720 <setup_pin_states+0xc8>)
 80006d6:	f001 fd36 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	480f      	ldr	r0, [pc, #60]	; (8000720 <setup_pin_states+0xc8>)
 80006e2:	f001 fd30 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, OV_TO_CHGR_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <setup_pin_states+0xc8>)
 80006ee:	f001 fd2a 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <setup_pin_states+0xc8>)
 80006fa:	f001 fd24 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GV_CLOSE_PULSE_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <setup_pin_states+0xc8>)
 8000706:	f001 fd1e 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GV_OPEN_PULSE_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <setup_pin_states+0xc8>)
 8000712:	f001 fd18 	bl	8002146 <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400
 8000724:	40020800 	.word	0x40020800

08000728 <LED_blinky>:

void LED_blinky(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000732:	4850      	ldr	r0, [pc, #320]	; (8000874 <LED_blinky+0x14c>)
 8000734:	f001 fd07 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000738:	20fa      	movs	r0, #250	; 0xfa
 800073a:	f000 fc8f 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	484b      	ldr	r0, [pc, #300]	; (8000874 <LED_blinky+0x14c>)
 8000746:	f001 fcfe 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT2_LED_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000750:	4848      	ldr	r0, [pc, #288]	; (8000874 <LED_blinky+0x14c>)
 8000752:	f001 fcf8 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000756:	20fa      	movs	r0, #250	; 0xfa
 8000758:	f000 fc80 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT2_LED_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000762:	4844      	ldr	r0, [pc, #272]	; (8000874 <LED_blinky+0x14c>)
 8000764:	f001 fcef 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT3_LED_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076e:	4841      	ldr	r0, [pc, #260]	; (8000874 <LED_blinky+0x14c>)
 8000770:	f001 fce9 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000774:	20fa      	movs	r0, #250	; 0xfa
 8000776:	f000 fc71 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT3_LED_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000780:	483c      	ldr	r0, [pc, #240]	; (8000874 <LED_blinky+0x14c>)
 8000782:	f001 fce0 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT4_LED_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078c:	4839      	ldr	r0, [pc, #228]	; (8000874 <LED_blinky+0x14c>)
 800078e:	f001 fcda 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000792:	20fa      	movs	r0, #250	; 0xfa
 8000794:	f000 fc62 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT4_LED_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	4835      	ldr	r0, [pc, #212]	; (8000874 <LED_blinky+0x14c>)
 80007a0:	f001 fcd1 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT5_LED_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007aa:	4832      	ldr	r0, [pc, #200]	; (8000874 <LED_blinky+0x14c>)
 80007ac:	f001 fccb 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80007b0:	20fa      	movs	r0, #250	; 0xfa
 80007b2:	f000 fc53 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT5_LED_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007bc:	482d      	ldr	r0, [pc, #180]	; (8000874 <LED_blinky+0x14c>)
 80007be:	f001 fcc2 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, _30A_CKT6_LED_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c8:	482a      	ldr	r0, [pc, #168]	; (8000874 <LED_blinky+0x14c>)
 80007ca:	f001 fcbc 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80007ce:	20fa      	movs	r0, #250	; 0xfa
 80007d0:	f000 fc44 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, _30A_CKT6_LED_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007da:	4826      	ldr	r0, [pc, #152]	; (8000874 <LED_blinky+0x14c>)
 80007dc:	f001 fcb3 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2102      	movs	r1, #2
 80007e4:	4824      	ldr	r0, [pc, #144]	; (8000878 <LED_blinky+0x150>)
 80007e6:	f001 fcae 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80007ea:	20fa      	movs	r0, #250	; 0xfa
 80007ec:	f000 fc36 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2102      	movs	r1, #2
 80007f4:	4820      	ldr	r0, [pc, #128]	; (8000878 <LED_blinky+0x150>)
 80007f6:	f001 fca6 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, _60A_CKT2_LED_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2104      	movs	r1, #4
 80007fe:	481e      	ldr	r0, [pc, #120]	; (8000878 <LED_blinky+0x150>)
 8000800:	f001 fca1 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000804:	20fa      	movs	r0, #250	; 0xfa
 8000806:	f000 fc29 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, _60A_CKT2_LED_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2104      	movs	r1, #4
 800080e:	481a      	ldr	r0, [pc, #104]	; (8000878 <LED_blinky+0x150>)
 8000810:	f001 fc99 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	4817      	ldr	r0, [pc, #92]	; (8000878 <LED_blinky+0x150>)
 800081c:	f001 fc93 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000820:	20fa      	movs	r0, #250	; 0xfa
 8000822:	f000 fc1b 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, UV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082c:	4812      	ldr	r0, [pc, #72]	; (8000878 <LED_blinky+0x150>)
 800082e:	f001 fc8a 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000838:	480f      	ldr	r0, [pc, #60]	; (8000878 <LED_blinky+0x150>)
 800083a:	f001 fc84 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800083e:	20fa      	movs	r0, #250	; 0xfa
 8000840:	f000 fc0c 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, OV_INDICATE_LED_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <LED_blinky+0x150>)
 800084c:	f001 fc7b 	bl	8002146 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	4809      	ldr	r0, [pc, #36]	; (800087c <LED_blinky+0x154>)
 8000858:	f001 fc75 	bl	8002146 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800085c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000860:	f000 fbfc 	bl	800105c <HAL_Delay>
  HAL_GPIO_WritePin(HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <LED_blinky+0x154>)
 800086c:	f001 fc6b 	bl	8002146 <HAL_GPIO_WritePin>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40020000 	.word	0x40020000
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b092      	sub	sp, #72	; 0x48
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2234      	movs	r2, #52	; 0x34
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 feb8 	bl	8003604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <SystemClock_Config+0x9c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <SystemClock_Config+0x9c>)
 80008ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008b2:	2303      	movs	r3, #3
 80008b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2310      	movs	r3, #16
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80008cc:	2300      	movs	r3, #0
 80008ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80008d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fc4c 	bl	8002178 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008e6:	f000 fa17 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2303      	movs	r3, #3
 80008f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	2101      	movs	r1, #1
 8000902:	4618      	mov	r0, r3
 8000904:	f001 ff68 	bl	80027d8 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800090e:	f000 fa03 	bl	8000d18 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3748      	adds	r7, #72	; 0x48
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40007000 	.word	0x40007000

08000920 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000930:	4b66      	ldr	r3, [pc, #408]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000932:	4a67      	ldr	r2, [pc, #412]	; (8000ad0 <MX_ADC_Init+0x1b0>)
 8000934:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000936:	4b65      	ldr	r3, [pc, #404]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800093c:	4b63      	ldr	r3, [pc, #396]	; (8000acc <MX_ADC_Init+0x1ac>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000942:	4b62      	ldr	r3, [pc, #392]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000948:	4b60      	ldr	r3, [pc, #384]	; (8000acc <MX_ADC_Init+0x1ac>)
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000950:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000956:	4b5d      	ldr	r3, [pc, #372]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800095c:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <MX_ADC_Init+0x1ac>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000962:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000968:	4b58      	ldr	r3, [pc, #352]	; (8000acc <MX_ADC_Init+0x1ac>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 10;
 8000970:	4b56      	ldr	r3, [pc, #344]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000972:	220a      	movs	r2, #10
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000976:	4b55      	ldr	r3, [pc, #340]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000980:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000986:	4b51      	ldr	r3, [pc, #324]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800098c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 800098e:	4b4f      	ldr	r3, [pc, #316]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000990:	2201      	movs	r2, #1
 8000992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000996:	484d      	ldr	r0, [pc, #308]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000998:	f000 fb82 	bl	80010a0 <HAL_ADC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC_Init+0x86>
  {
    Error_Handler();
 80009a2:	f000 f9b9 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80009ae:	2306      	movs	r3, #6
 80009b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4845      	ldr	r0, [pc, #276]	; (8000acc <MX_ADC_Init+0x1ac>)
 80009b8:	f000 fd62 	bl	8001480 <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80009c2:	f000 f9a9 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	483e      	ldr	r0, [pc, #248]	; (8000acc <MX_ADC_Init+0x1ac>)
 80009d4:	f000 fd54 	bl	8001480 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC_Init+0xc2>
  {
    Error_Handler();
 80009de:	f000 f99b 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009e6:	2303      	movs	r3, #3
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4837      	ldr	r0, [pc, #220]	; (8000acc <MX_ADC_Init+0x1ac>)
 80009f0:	f000 fd46 	bl	8001480 <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC_Init+0xde>
  {
    Error_Handler();
 80009fa:	f000 f98d 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009fe:	2303      	movs	r3, #3
 8000a00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4830      	ldr	r0, [pc, #192]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000a0c:	f000 fd38 	bl	8001480 <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC_Init+0xfa>
  {
    Error_Handler();
 8000a16:	f000 f97f 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a1e:	2305      	movs	r3, #5
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4829      	ldr	r0, [pc, #164]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000a28:	f000 fd2a 	bl	8001480 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC_Init+0x116>
  {
    Error_Handler();
 8000a32:	f000 f971 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a36:	2305      	movs	r3, #5
 8000a38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4822      	ldr	r0, [pc, #136]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000a44:	f000 fd1c 	bl	8001480 <HAL_ADC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC_Init+0x132>
  {
    Error_Handler();
 8000a4e:	f000 f963 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a52:	2306      	movs	r3, #6
 8000a54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a56:	2307      	movs	r3, #7
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481b      	ldr	r0, [pc, #108]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000a60:	f000 fd0e 	bl	8001480 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC_Init+0x14e>
  {
    Error_Handler();
 8000a6a:	f000 f955 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a72:	2308      	movs	r3, #8
 8000a74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000a7c:	f000 fd00 	bl	8001480 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC_Init+0x16a>
  {
    Error_Handler();
 8000a86:	f000 f947 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_20;
 8000a8a:	2314      	movs	r3, #20
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a8e:	2309      	movs	r3, #9
 8000a90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000a98:	f000 fcf2 	bl	8001480 <HAL_ADC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC_Init+0x186>
  {
    Error_Handler();
 8000aa2:	f000 f939 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_21;
 8000aa6:	2315      	movs	r3, #21
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_ADC_Init+0x1ac>)
 8000ab4:	f000 fce4 	bl	8001480 <HAL_ADC_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC_Init+0x1a2>
  {
    Error_Handler();
 8000abe:	f000 f92b 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000028 	.word	0x20000028
 8000ad0:	40012400 	.word	0x40012400

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af2:	463b      	mov	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 33600-1;
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b08:	f248 323f 	movw	r2, #33599	; 0x833f
 8000b0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 714-1;
 8000b14:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b16:	f240 22c9 	movw	r2, #713	; 0x2c9
 8000b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b28:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b2a:	f002 f8a7 	bl	8002c7c <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000b34:	f000 f8f0 	bl	8000d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4619      	mov	r1, r3
 8000b44:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b46:	f002 fa29 	bl	8002f9c <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000b50:	f000 f8e2 	bl	8000d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b54:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b56:	f002 f91b 	bl	8002d90 <HAL_TIM_PWM_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b60:	f000 f8da 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b64:	2320      	movs	r3, #32
 8000b66:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b74:	f002 fcc4 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000b7e:	f000 f8cb 	bl	8000d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b82:	2360      	movs	r3, #96	; 0x60
 8000b84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_TIM2_Init+0xdc>)
 8000b9a:	f002 f941 	bl	8002e20 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000ba4:	f000 f8b8 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000c0 	.word	0x200000c0

08000bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_DMA_Init+0x38>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <MX_DMA_Init+0x38>)
 8000bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc4:	61d3      	str	r3, [r2, #28]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_DMA_Init+0x38>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	200b      	movs	r0, #11
 8000bd8:	f000 ff51 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bdc:	200b      	movs	r0, #11
 8000bde:	f000 ff6a 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b40      	ldr	r3, [pc, #256]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a3f      	ldr	r2, [pc, #252]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a39      	ldr	r2, [pc, #228]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 0320 	and.w	r3, r3, #32
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a33      	ldr	r2, [pc, #204]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	61d3      	str	r3, [r2, #28]
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <MX_GPIO_Init+0x118>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_EN_GPIO_Port, HEATER_EN_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	4827      	ldr	r0, [pc, #156]	; (8000d0c <MX_GPIO_Init+0x11c>)
 8000c6e:	f001 fa6a 	bl	8002146 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _60A_CKT1_LED_Pin|_60A_CKT2_LED_Pin|UV_TO_INV_Pin|OV_TO_CHGR_Pin
 8000c72:	2200      	movs	r2, #0
 8000c74:	f643 7126 	movw	r1, #16166	; 0x3f26
 8000c78:	4825      	ldr	r0, [pc, #148]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000c7a:	f001 fa64 	bl	8002146 <HAL_GPIO_WritePin>
                          |GV_CLOSE_PULSE_Pin|GV_OPEN_PULSE_Pin|DEBUG_LED_Pin|UV_INDICATE_LED_Pin
                          |OV_INDICATE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _30A_CKT1_LED_Pin|_30A_CKT2_LED_Pin|_30A_CKT3_LED_Pin|_30A_CKT4_LED_Pin
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8000c84:	4823      	ldr	r0, [pc, #140]	; (8000d14 <MX_GPIO_Init+0x124>)
 8000c86:	f001 fa5e 	bl	8002146 <HAL_GPIO_WritePin>
                          |_30A_CKT5_LED_Pin|_30A_CKT6_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : HEATER_EN_Pin */
  GPIO_InitStruct.Pin = HEATER_EN_Pin;
 8000c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HEATER_EN_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481a      	ldr	r0, [pc, #104]	; (8000d0c <MX_GPIO_Init+0x11c>)
 8000ca4:	f001 f8b8 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_INPUT_Pin OV_INPUT_Pin */
  GPIO_InitStruct.Pin = UV_INPUT_Pin|OV_INPUT_Pin;
 8000ca8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <MX_GPIO_Init+0x11c>)
 8000cbe:	f001 f8ab 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : _60A_CKT1_LED_Pin _60A_CKT2_LED_Pin UV_TO_INV_Pin OV_TO_CHGR_Pin
                           GV_CLOSE_PULSE_Pin GV_OPEN_PULSE_Pin DEBUG_LED_Pin UV_INDICATE_LED_Pin
                           OV_INDICATE_LED_Pin */
  GPIO_InitStruct.Pin = _60A_CKT1_LED_Pin|_60A_CKT2_LED_Pin|UV_TO_INV_Pin|OV_TO_CHGR_Pin
 8000cc2:	f643 7326 	movw	r3, #16166	; 0x3f26
 8000cc6:	617b      	str	r3, [r7, #20]
                          |GV_CLOSE_PULSE_Pin|GV_OPEN_PULSE_Pin|DEBUG_LED_Pin|UV_INDICATE_LED_Pin
                          |OV_INDICATE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_GPIO_Init+0x120>)
 8000cdc:	f001 f89c 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : _30A_CKT1_LED_Pin _30A_CKT2_LED_Pin _30A_CKT3_LED_Pin _30A_CKT4_LED_Pin
                           _30A_CKT5_LED_Pin _30A_CKT6_LED_Pin */
  GPIO_InitStruct.Pin = _30A_CKT1_LED_Pin|_30A_CKT2_LED_Pin|_30A_CKT3_LED_Pin|_30A_CKT4_LED_Pin
 8000ce0:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8000ce4:	617b      	str	r3, [r7, #20]
                          |_30A_CKT5_LED_Pin|_30A_CKT6_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_GPIO_Init+0x124>)
 8000cfa:	f001 f88d 	bl	8001e18 <HAL_GPIO_Init>

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40020000 	.word	0x40020000

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_MspInit+0x58>)
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_MspInit+0x58>)
 8000d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d34:	6253      	str	r3, [r2, #36]	; 0x24
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_MspInit+0x58>)
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_MspInit+0x58>)
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_MspInit+0x58>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6213      	str	r3, [r2, #32]
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_MspInit+0x58>)
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_MspInit+0x58>)
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_MspInit+0x58>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6253      	str	r3, [r2, #36]	; 0x24
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_MspInit+0x58>)
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a35      	ldr	r2, [pc, #212]	; (8000e74 <HAL_ADC_MspInit+0xf4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d164      	bne.n	8000e6c <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dac:	6213      	str	r3, [r2, #32]
 8000dae:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a2e      	ldr	r2, [pc, #184]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a28      	ldr	r2, [pc, #160]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB14     ------> ADC_IN20
    PB15     ------> ADC_IN21
    */
    GPIO_InitStruct.Pin = _30A_CKT6_SNS_Pin|_30A_CKT5_SNS_Pin|_30A_CKT4_SNS_Pin|_30A_CKT3_SNS_Pin
 8000dea:	23ff      	movs	r3, #255	; 0xff
 8000dec:	617b      	str	r3, [r7, #20]
                          |_30A_CKT2_SNS_Pin|_30A_CKT1_SNS_Pin|_60A_CKT2_SNS_Pin|_60A_CKT1_SNS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dee:	2303      	movs	r3, #3
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481f      	ldr	r0, [pc, #124]	; (8000e7c <HAL_ADC_MspInit+0xfc>)
 8000dfe:	f001 f80b 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_PCBA_Pin|NTC_SHUNTS_Pin;
 8000e02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	481a      	ldr	r0, [pc, #104]	; (8000e80 <HAL_ADC_MspInit+0x100>)
 8000e18:	f000 fffe 	bl	8001e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e1e:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <HAL_ADC_MspInit+0x108>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e46:	2220      	movs	r2, #32
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e52:	f000 fe4b 	bl	8001aec <HAL_DMA_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000e5c:	f7ff ff5c 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e64:	645a      	str	r2, [r3, #68]	; 0x44
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_ADC_MspInit+0x104>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40012400 	.word	0x40012400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	2000007c 	.word	0x2000007c
 8000e88:	40026008 	.word	0x40026008

08000e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_TIM_Base_MspInit+0x34>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_TIM_Base_MspInit+0x34>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6253      	str	r3, [r2, #36]	; 0x24
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_TIM_Base_MspInit+0x34>)
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40023800 	.word	0x40023800

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0a:	f000 f88b 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <DMA1_Channel1_IRQHandler+0x10>)
 8000f1a:	f000 fe9f 	bl	8001c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000007c 	.word	0x2000007c

08000f28 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f36:	490d      	ldr	r1, [pc, #52]	; (8000f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	; (8000f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f5a:	f7ff ffe5 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f002 fb2d 	bl	80035bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f62:	f7ff fa8f 	bl	8000484 <main>
  bx lr
 8000f66:	4770      	bx	lr
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f70:	08003658 	.word	0x08003658
  ldr r2, =_sbss
 8000f74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f78:	20000104 	.word	0x20000104

08000f7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_IRQHandler>

08000f7e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 fd6d 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f000 f80e 	bl	8000fb0 <HAL_InitTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	e001      	b.n	8000fa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa0:	f7ff fec0 	bl	8000d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_InitTick+0x68>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d022      	beq.n	800100a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_InitTick+0x6c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_InitTick+0x68>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fd7a 	bl	8001ad2 <HAL_SYSTICK_Config>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10f      	bne.n	8001004 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	d809      	bhi.n	8000ffe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fea:	2200      	movs	r2, #0
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff2:	f000 fd44 	bl	8001a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_InitTick+0x70>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e007      	b.n	800100e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e004      	b.n	800100e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e001      	b.n	800100e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000008 	.word	0x20000008
 800101c:	20000000 	.word	0x20000000
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x1c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x20>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4413      	add	r3, r2
 8001032:	4a03      	ldr	r2, [pc, #12]	; (8001040 <HAL_IncTick+0x1c>)
 8001034:	6013      	str	r3, [r2, #0]
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000100 	.word	0x20000100
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000100 	.word	0x20000100

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff fff0 	bl	8001048 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d004      	beq.n	8001080 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_Delay+0x40>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001080:	bf00      	nop
 8001082:	f7ff ffe1 	bl	8001048 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	429a      	cmp	r2, r3
 8001090:	d8f7      	bhi.n	8001082 <HAL_Delay+0x26>
  {
  }
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000008 	.word	0x20000008

080010a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	; 0x38
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e127      	b.n	8001310 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d115      	bne.n	80010fa <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b8e      	ldr	r3, [pc, #568]	; (8001318 <HAL_ADC_Init+0x278>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a8d      	ldr	r2, [pc, #564]	; (8001318 <HAL_ADC_Init+0x278>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	4b8b      	ldr	r3, [pc, #556]	; (8001318 <HAL_ADC_Init+0x278>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fe43 	bl	8000d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 80ff 	bne.w	8001306 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001110:	f023 0302 	bic.w	r3, r3, #2
 8001114:	f043 0202 	orr.w	r2, r3, #2
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800111c:	4b7f      	ldr	r3, [pc, #508]	; (800131c <HAL_ADC_Init+0x27c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	497c      	ldr	r1, [pc, #496]	; (800131c <HAL_ADC_Init+0x27c>)
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001136:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800113e:	4619      	mov	r1, r3
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800115a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001160:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	2302      	movs	r3, #2
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001182:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001186:	4313      	orrs	r3, r2
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118e:	2b10      	cmp	r3, #16
 8001190:	d007      	beq.n	80011a2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800119a:	4313      	orrs	r3, r2
 800119c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800119e:	4313      	orrs	r3, r2
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ac:	2b40      	cmp	r3, #64	; 0x40
 80011ae:	d04f      	beq.n	8001250 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b6:	4313      	orrs	r3, r2
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011c2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6912      	ldr	r2, [r2, #16]
 80011c8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80011cc:	d003      	beq.n	80011d6 <HAL_ADC_Init+0x136>
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6912      	ldr	r2, [r2, #16]
 80011d2:	2a01      	cmp	r2, #1
 80011d4:	d102      	bne.n	80011dc <HAL_ADC_Init+0x13c>
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	e000      	b.n	80011de <HAL_ADC_Init+0x13e>
 80011dc:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80011de:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e2:	4313      	orrs	r3, r2
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d125      	bne.n	800123c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d114      	bne.n	8001224 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	3b01      	subs	r3, #1
 8001200:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001204:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	fa92 f2a2 	rbit	r2, r2
 800120c:	617a      	str	r2, [r7, #20]
  return result;
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	fab2 f282 	clz	r2, r2
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	4093      	lsls	r3, r2
 8001218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800121c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800121e:	4313      	orrs	r3, r2
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
 8001222:	e00b      	b.n	800123c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f043 0220 	orr.w	r2, r3, #32
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001234:	f043 0201 	orr.w	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4b37      	ldr	r3, [pc, #220]	; (8001320 <HAL_ADC_Init+0x280>)
 8001244:	4013      	ands	r3, r2
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800124c:	430b      	orrs	r3, r1
 800124e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_ADC_Init+0x284>)
 8001258:	4013      	ands	r3, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001260:	430b      	orrs	r3, r1
 8001262:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126c:	d003      	beq.n	8001276 <HAL_ADC_Init+0x1d6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d119      	bne.n	80012aa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	3b01      	subs	r3, #1
 8001286:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800128a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	fa92 f2a2 	rbit	r2, r2
 8001292:	60fa      	str	r2, [r7, #12]
  return result;
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	fab2 f282 	clz	r2, r2
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	fa03 f202 	lsl.w	r2, r3, r2
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
 80012a8:	e007      	b.n	80012ba <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_ADC_Init+0x288>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d10b      	bne.n	80012e2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	f023 0303 	bic.w	r3, r3, #3
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	64da      	str	r2, [r3, #76]	; 0x4c
 80012e0:	e014      	b.n	800130c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f023 0312 	bic.w	r3, r3, #18
 80012ea:	f043 0210 	orr.w	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001304:	e002      	b.n	800130c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800130c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001310:	4618      	mov	r0, r3
 8001312:	3738      	adds	r7, #56	; 0x38
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40012700 	.word	0x40012700
 8001320:	fcfc16ff 	.word	0xfcfc16ff
 8001324:	c0fff18d 	.word	0xc0fff18d
 8001328:	bf80fffe 	.word	0xbf80fffe

0800132c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_ADC_Start_DMA+0x1e>
 8001346:	2302      	movs	r3, #2
 8001348:	e074      	b.n	8001434 <HAL_ADC_Start_DMA+0x108>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f9e4 	bl	8001720 <ADC_Enable>
 8001358:	4603      	mov	r3, r0
 800135a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d167      	bne.n	8001432 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800138c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a0:	d106      	bne.n	80013b0 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a6:	f023 0206 	bic.w	r2, r3, #6
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	651a      	str	r2, [r3, #80]	; 0x50
 80013ae:	e002      	b.n	80013b6 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_ADC_Start_DMA+0x110>)
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_ADC_Start_DMA+0x114>)
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_ADC_Start_DMA+0x118>)
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3358      	adds	r3, #88	; 0x58
 800140a:	4619      	mov	r1, r3
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f000 fbc4 	bl	8001b9c <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d107      	bne.n	8001432 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001430:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001432:	7dfb      	ldrb	r3, [r7, #23]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	080017d9 	.word	0x080017d9
 8001440:	08001881 	.word	0x08001881
 8001444:	0800189d 	.word	0x0800189d

08001448 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x20>
 800149c:	2302      	movs	r3, #2
 800149e:	e134      	b.n	800170a <HAL_ADC_ConfigChannel+0x28a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b06      	cmp	r3, #6
 80014ae:	d81c      	bhi.n	80014ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b05      	subs	r3, #5
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b05      	subs	r3, #5
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
 80014e8:	e07e      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d81c      	bhi.n	800152c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	221f      	movs	r2, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	4019      	ands	r1, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b23      	subs	r3, #35	; 0x23
 800151e:	fa00 f203 	lsl.w	r2, r0, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	63da      	str	r2, [r3, #60]	; 0x3c
 800152a:	e05d      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b12      	cmp	r3, #18
 8001532:	d81c      	bhi.n	800156e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b41      	subs	r3, #65	; 0x41
 8001546:	221f      	movs	r2, #31
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	4019      	ands	r1, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b41      	subs	r3, #65	; 0x41
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	639a      	str	r2, [r3, #56]	; 0x38
 800156c:	e03c      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b18      	cmp	r3, #24
 8001574:	d81c      	bhi.n	80015b0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	3b5f      	subs	r3, #95	; 0x5f
 8001588:	221f      	movs	r2, #31
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	4019      	ands	r1, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b5f      	subs	r3, #95	; 0x5f
 80015a2:	fa00 f203 	lsl.w	r2, r0, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
 80015ae:	e01b      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b7d      	subs	r3, #125	; 0x7d
 80015c2:	221f      	movs	r2, #31
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4019      	ands	r1, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b7d      	subs	r3, #125	; 0x7d
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	d81a      	bhi.n	8001626 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6959      	ldr	r1, [r3, #20]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	2207      	movs	r2, #7
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	4019      	ands	r1, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6898      	ldr	r0, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	fa00 f203 	lsl.w	r2, r0, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	e042      	b.n	80016ac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b13      	cmp	r3, #19
 800162c:	d81c      	bhi.n	8001668 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6919      	ldr	r1, [r3, #16]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	3b1e      	subs	r3, #30
 8001640:	2207      	movs	r2, #7
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	4019      	ands	r1, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6898      	ldr	r0, [r3, #8]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	3b1e      	subs	r3, #30
 800165a:	fa00 f203 	lsl.w	r2, r0, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	e021      	b.n	80016ac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b1a      	cmp	r3, #26
 800166e:	d81c      	bhi.n	80016aa <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68d9      	ldr	r1, [r3, #12]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	3b3c      	subs	r3, #60	; 0x3c
 8001682:	2207      	movs	r2, #7
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	4019      	ands	r1, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6898      	ldr	r0, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	3b3c      	subs	r3, #60	; 0x3c
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	e000      	b.n	80016ac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80016aa:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b10      	cmp	r3, #16
 80016b2:	d003      	beq.n	80016bc <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016b8:	2b11      	cmp	r3, #17
 80016ba:	d121      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_ADC_ConfigChannel+0x294>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11b      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_ADC_ConfigChannel+0x294>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a11      	ldr	r2, [pc, #68]	; (8001714 <HAL_ADC_ConfigChannel+0x294>)
 80016ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016d2:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b10      	cmp	r3, #16
 80016da:	d111      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_ADC_ConfigChannel+0x298>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_ADC_ConfigChannel+0x29c>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9a      	lsrs	r2, r3, #18
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80016f2:	e002      	b.n	80016fa <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f9      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40012700 	.word	0x40012700
 8001718:	20000000 	.word	0x20000000
 800171c:	431bde83 	.word	0x431bde83

08001720 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	2b40      	cmp	r3, #64	; 0x40
 800173c:	d043      	beq.n	80017c6 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0201 	orr.w	r2, r2, #1
 800174c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <ADC_Enable+0xb0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <ADC_Enable+0xb4>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9a      	lsrs	r2, r3, #18
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001762:	e002      	b.n	800176a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	3b01      	subs	r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001770:	f7ff fc6a 	bl	8001048 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001776:	e01f      	b.n	80017b8 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001778:	f7ff fc66 	bl	8001048 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d918      	bls.n	80017b8 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001790:	2b40      	cmp	r3, #64	; 0x40
 8001792:	d011      	beq.n	80017b8 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	f043 0210 	orr.w	r2, r3, #16
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e007      	b.n	80017c8 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c2:	2b40      	cmp	r3, #64	; 0x40
 80017c4:	d1d8      	bne.n	8001778 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	431bde83 	.word	0x431bde83

080017d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d13d      	bne.n	800186e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d12c      	bne.n	8001866 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d127      	bne.n	8001866 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800182e:	2b00      	cmp	r3, #0
 8001830:	d119      	bne.n	8001866 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0220 	bic.w	r2, r2, #32
 8001840:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f7ff fdee 	bl	8001448 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800186c:	e004      	b.n	8001878 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff fde3 	bl	800145a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ba:	f043 0204 	orr.w	r2, r3, #4
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff fdd2 	bl	800146c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4906      	ldr	r1, [pc, #24]	; (8001968 <__NVIC_EnableIRQ+0x34>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff90 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff2d 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff42 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff35 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e043      	b.n	8001b86 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_DMA_Init+0xa4>)
 8001b06:	4413      	add	r3, r2
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_DMA_Init+0xa8>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	009a      	lsls	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <HAL_DMA_Init+0xac>)
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	bffd9ff8 	.word	0xbffd9ff8
 8001b94:	cccccccd 	.word	0xcccccccd
 8001b98:	40026000 	.word	0x40026000

08001b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA_Start_IT+0x20>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e04b      	b.n	8001c54 <HAL_DMA_Start_IT+0xb8>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d13a      	bne.n	8001c46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f8e0 	bl	8001dba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 020e 	orr.w	r2, r2, #14
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e00f      	b.n	8001c34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0204 	bic.w	r2, r2, #4
 8001c22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 020a 	orr.w	r2, r2, #10
 8001c32:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e005      	b.n	8001c52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f003 031c 	and.w	r3, r3, #28
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d026      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x7a>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d021      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0204 	bic.w	r2, r2, #4
 8001cae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f003 021c 	and.w	r2, r3, #28
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d071      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cd4:	e06c      	b.n	8001db0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 031c 	and.w	r3, r3, #28
 8001cde:	2202      	movs	r2, #2
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d02e      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xec>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d029      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 020a 	bic.w	r2, r2, #10
 8001d10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 021c 	and.w	r2, r3, #28
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d26:	2102      	movs	r1, #2
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d038      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d46:	e033      	b.n	8001db0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f003 031c 	and.w	r3, r3, #28
 8001d50:	2208      	movs	r2, #8
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02a      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x156>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d025      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020e 	bic.w	r2, r2, #14
 8001d74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 021c 	and.w	r2, r3, #28
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
}
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f003 021c 	and.w	r2, r3, #28
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dda:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d108      	bne.n	8001dfe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dfc:	e007      	b.n	8001e0e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	60da      	str	r2, [r3, #12]
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e2e:	e154      	b.n	80020da <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8146 	beq.w	80020d4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d005      	beq.n	8001e60 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d130      	bne.n	8001ec2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001e96:	2201      	movs	r2, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 0201 	and.w	r2, r3, #1
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d017      	beq.n	8001efe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d123      	bne.n	8001f52 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	6939      	ldr	r1, [r7, #16]
 8001f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0203 	and.w	r2, r3, #3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80a0 	beq.w	80020d4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f94:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <HAL_GPIO_Init+0x2e0>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_GPIO_Init+0x2e0>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <HAL_GPIO_Init+0x2e0>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fac:	4a53      	ldr	r2, [pc, #332]	; (80020fc <HAL_GPIO_Init+0x2e4>)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a4b      	ldr	r2, [pc, #300]	; (8002100 <HAL_GPIO_Init+0x2e8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d019      	beq.n	800200c <HAL_GPIO_Init+0x1f4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a4a      	ldr	r2, [pc, #296]	; (8002104 <HAL_GPIO_Init+0x2ec>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <HAL_GPIO_Init+0x1f0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a49      	ldr	r2, [pc, #292]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00d      	beq.n	8002004 <HAL_GPIO_Init+0x1ec>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a48      	ldr	r2, [pc, #288]	; (800210c <HAL_GPIO_Init+0x2f4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <HAL_GPIO_Init+0x1e8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a47      	ldr	r2, [pc, #284]	; (8002110 <HAL_GPIO_Init+0x2f8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_GPIO_Init+0x1e4>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e008      	b.n	800200e <HAL_GPIO_Init+0x1f6>
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	e006      	b.n	800200e <HAL_GPIO_Init+0x1f6>
 8002000:	2303      	movs	r3, #3
 8002002:	e004      	b.n	800200e <HAL_GPIO_Init+0x1f6>
 8002004:	2302      	movs	r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0x1f6>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_GPIO_Init+0x1f6>
 800200c:	2300      	movs	r3, #0
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	4093      	lsls	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800201e:	4937      	ldr	r1, [pc, #220]	; (80020fc <HAL_GPIO_Init+0x2e4>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202c:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002050:	4a30      	ldr	r2, [pc, #192]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800207a:	4a26      	ldr	r2, [pc, #152]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f47f aea3 	bne.w	8001e30 <HAL_GPIO_Init+0x18>
  }
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40010000 	.word	0x40010000
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40020800 	.word	0x40020800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021000 	.word	0x40021000
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e001      	b.n	800213a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	807b      	strh	r3, [r7, #2]
 8002152:	4613      	mov	r3, r2
 8002154:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002156:	787b      	ldrb	r3, [r7, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215c:	887a      	ldrh	r2, [r7, #2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002162:	e003      	b.n	800216c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	041a      	lsls	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
	...

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e31d      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800218a:	4b94      	ldr	r3, [pc, #592]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002194:	4b91      	ldr	r3, [pc, #580]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d07b      	beq.n	80022a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d006      	beq.n	80021be <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d10f      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5e>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d10b      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	4b87      	ldr	r3, [pc, #540]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06a      	beq.n	80022a0 <HAL_RCC_OscConfig+0x128>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d166      	bne.n	80022a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e2f7      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x74>
 80021de:	4b7f      	ldr	r3, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7e      	ldr	r2, [pc, #504]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e02d      	b.n	8002248 <HAL_RCC_OscConfig+0xd0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x96>
 80021f4:	4b79      	ldr	r3, [pc, #484]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a78      	ldr	r2, [pc, #480]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80021fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b76      	ldr	r3, [pc, #472]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a75      	ldr	r2, [pc, #468]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	e01c      	b.n	8002248 <HAL_RCC_OscConfig+0xd0>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0xb8>
 8002216:	4b71      	ldr	r3, [pc, #452]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a70      	ldr	r2, [pc, #448]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a6d      	ldr	r2, [pc, #436]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0xd0>
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a69      	ldr	r2, [pc, #420]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a66      	ldr	r2, [pc, #408]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fefa 	bl	8001048 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe fef6 	bl	8001048 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e2ad      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800226a:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0xe0>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe fee6 	bl	8001048 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002280:	f7fe fee2 	bl	8001048 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e299      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002292:	4b52      	ldr	r3, [pc, #328]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x108>
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d05a      	beq.n	8002364 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d119      	bne.n	80022ee <HAL_RCC_OscConfig+0x176>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d116      	bne.n	80022ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x160>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e276      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b40      	ldr	r3, [pc, #256]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	493d      	ldr	r1, [pc, #244]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ec:	e03a      	b.n	8002364 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d020      	beq.n	8002338 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f6:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <HAL_RCC_OscConfig+0x268>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fea4 	bl	8001048 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe fea0 	bl	8001048 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e257      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	492a      	ldr	r1, [pc, #168]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
 8002336:	e015      	b.n	8002364 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002338:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_RCC_OscConfig+0x268>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe fe83 	bl	8001048 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002346:	f7fe fe7f 	bl	8001048 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e236      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80b8 	beq.w	80024e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d170      	bne.n	800245a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x218>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e21a      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800239c:	429a      	cmp	r2, r3
 800239e:	d921      	bls.n	80023e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fc09 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e208      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4906      	ldr	r1, [pc, #24]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	061b      	lsls	r3, r3, #24
 80023d4:	4901      	ldr	r1, [pc, #4]	; (80023dc <HAL_RCC_OscConfig+0x264>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
 80023da:	e020      	b.n	800241e <HAL_RCC_OscConfig+0x2a6>
 80023dc:	40023800 	.word	0x40023800
 80023e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e4:	4b99      	ldr	r3, [pc, #612]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4996      	ldr	r1, [pc, #600]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f6:	4b95      	ldr	r3, [pc, #596]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	4991      	ldr	r1, [pc, #580]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fbd4 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1d3      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	0b5b      	lsrs	r3, r3, #13
 8002424:	3301      	adds	r3, #1
 8002426:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800242e:	4a87      	ldr	r2, [pc, #540]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	0912      	lsrs	r2, r2, #4
 8002434:	f002 020f 	and.w	r2, r2, #15
 8002438:	4985      	ldr	r1, [pc, #532]	; (8002650 <HAL_RCC_OscConfig+0x4d8>)
 800243a:	5c8a      	ldrb	r2, [r1, r2]
 800243c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800243e:	4a85      	ldr	r2, [pc, #532]	; (8002654 <HAL_RCC_OscConfig+0x4dc>)
 8002440:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002442:	4b85      	ldr	r3, [pc, #532]	; (8002658 <HAL_RCC_OscConfig+0x4e0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fdb2 	bl	8000fb0 <HAL_InitTick>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d045      	beq.n	80024e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	e1b5      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d029      	beq.n	80024b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002462:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCC_OscConfig+0x4e4>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fdee 	bl	8001048 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002470:	f7fe fdea 	bl	8001048 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1a1      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800248e:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	496c      	ldr	r1, [pc, #432]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	4967      	ldr	r1, [pc, #412]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
 80024b4:	e015      	b.n	80024e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024b6:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x4e4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe fdc4 	bl	8001048 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c4:	f7fe fdc0 	bl	8001048 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e177      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d030      	beq.n	8002550 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f6:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7fe fda4 	bl	8001048 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe fda0 	bl	8001048 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e157      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002516:	4b4d      	ldr	r3, [pc, #308]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x38c>
 8002522:	e015      	b.n	8002550 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002524:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe fd8d 	bl	8001048 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002532:	f7fe fd89 	bl	8001048 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e140      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002544:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80b5 	beq.w	80026c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	4a36      	ldr	r2, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6253      	str	r3, [r2, #36]	; 0x24
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x4ec>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_RCC_OscConfig+0x4ec>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a32      	ldr	r2, [pc, #200]	; (8002664 <HAL_RCC_OscConfig+0x4ec>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fd51 	bl	8001048 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe fd4d 	bl	8001048 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	; 0x64
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e104      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_RCC_OscConfig+0x4ec>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x466>
 80025d0:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025da:	6353      	str	r3, [r2, #52]	; 0x34
 80025dc:	e02d      	b.n	800263a <HAL_RCC_OscConfig+0x4c2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x488>
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80025ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025f0:	6353      	str	r3, [r2, #52]	; 0x34
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	4a15      	ldr	r2, [pc, #84]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 80025f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025fc:	6353      	str	r3, [r2, #52]	; 0x34
 80025fe:	e01c      	b.n	800263a <HAL_RCC_OscConfig+0x4c2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_OscConfig+0x4aa>
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002612:	6353      	str	r3, [r2, #52]	; 0x34
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	4a0c      	ldr	r2, [pc, #48]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6353      	str	r3, [r2, #52]	; 0x34
 8002620:	e00b      	b.n	800263a <HAL_RCC_OscConfig+0x4c2>
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800262c:	6353      	str	r3, [r2, #52]	; 0x34
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002632:	4a06      	ldr	r2, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002638:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d024      	beq.n	800268c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe fd01 	bl	8001048 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002648:	e019      	b.n	800267e <HAL_RCC_OscConfig+0x506>
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	08003638 	.word	0x08003638
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004
 800265c:	42470020 	.word	0x42470020
 8002660:	42470680 	.word	0x42470680
 8002664:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fe fcee 	bl	8001048 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0a3      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800267e:	4b54      	ldr	r3, [pc, #336]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ee      	beq.n	8002668 <HAL_RCC_OscConfig+0x4f0>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7fe fcdc 	bl	8001048 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fcd8 	bl	8001048 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e08d      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026aa:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1ee      	bne.n	8002694 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	4a43      	ldr	r2, [pc, #268]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d079      	beq.n	80027c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d056      	beq.n	8002784 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d13b      	bne.n	8002756 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_RCC_OscConfig+0x65c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fcb0 	bl	8001048 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe fcac 	bl	8001048 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e063      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	4319      	orrs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	430b      	orrs	r3, r1
 8002722:	492b      	ldr	r1, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_RCC_OscConfig+0x65c>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fc8b 	bl	8001048 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002736:	f7fe fc87 	bl	8001048 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e03e      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x5be>
 8002754:	e036      	b.n	80027c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <HAL_RCC_OscConfig+0x65c>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fc74 	bl	8001048 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fc70 	bl	8001048 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e027      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x5ec>
 8002782:	e01f      	b.n	80027c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e01a      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_RCC_OscConfig+0x658>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d10d      	bne.n	80027c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470060 	.word	0x42470060

080027d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e11a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b8f      	ldr	r3, [pc, #572]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d919      	bls.n	800282e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d105      	bne.n	800280c <HAL_RCC_ClockConfig+0x34>
 8002800:	4b8a      	ldr	r3, [pc, #552]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a89      	ldr	r2, [pc, #548]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b87      	ldr	r3, [pc, #540]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 0201 	bic.w	r2, r3, #1
 8002814:	4985      	ldr	r1, [pc, #532]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281c:	4b83      	ldr	r3, [pc, #524]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0f9      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283a:	4b7d      	ldr	r3, [pc, #500]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	497a      	ldr	r1, [pc, #488]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 808e 	beq.w	8002976 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002862:	4b73      	ldr	r3, [pc, #460]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d121      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0d7      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d115      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0cb      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002892:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0bf      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0b7      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b5f      	ldr	r3, [pc, #380]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	495c      	ldr	r1, [pc, #368]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fbc0 	bl	8001048 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d112      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fe fbb8 	bl	8001048 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e09b      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ea:	4b51      	ldr	r3, [pc, #324]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d1ee      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xfc>
 80028f6:	e03e      	b.n	8002976 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d112      	bne.n	8002926 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002902:	f7fe fba1 	bl	8001048 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e084      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002918:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d1ee      	bne.n	8002902 <HAL_RCC_ClockConfig+0x12a>
 8002924:	e027      	b.n	8002976 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d11d      	bne.n	800296a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7fe fb8a 	bl	8001048 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e06d      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002946:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d1ee      	bne.n	8002930 <HAL_RCC_ClockConfig+0x158>
 8002952:	e010      	b.n	8002976 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe fb78 	bl	8001048 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e05b      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ee      	bne.n	8002954 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d219      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d105      	bne.n	8002996 <HAL_RCC_ClockConfig+0x1be>
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0201 	bic.w	r2, r3, #1
 800299e:	4923      	ldr	r1, [pc, #140]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCC_ClockConfig+0x254>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e034      	b.n	8002a22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4917      	ldr	r1, [pc, #92]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	490f      	ldr	r1, [pc, #60]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f6:	f000 f823 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_RCC_ClockConfig+0x258>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	490b      	ldr	r1, [pc, #44]	; (8002a34 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <HAL_RCC_ClockConfig+0x260>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x264>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe faca 	bl	8000fb0 <HAL_InitTick>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a20:	7afb      	ldrb	r3, [r7, #11]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023c00 	.word	0x40023c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08003638 	.word	0x08003638
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b08e      	sub	sp, #56	; 0x38
 8002a46:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a48:	4b58      	ldr	r3, [pc, #352]	; (8002bac <HAL_RCC_GetSysClockFreq+0x16c>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d00d      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x34>
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	f200 8092 	bhi.w	8002b82 <HAL_RCC_GetSysClockFreq+0x142>
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d002      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x28>
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x2e>
 8002a66:	e08c      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x170>)
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a6c:	e097      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a6e:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x174>)
 8002a70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a72:	e094      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	4b4e      	ldr	r3, [pc, #312]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x178>)
 8002a7e:	5c9b      	ldrb	r3, [r3, r2]
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	0d9b      	lsrs	r3, r3, #22
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_GetSysClockFreq+0x16c>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d021      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	61fa      	str	r2, [r7, #28]
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x174>)
 8002aa4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002aa8:	464a      	mov	r2, r9
 8002aaa:	fb03 f202 	mul.w	r2, r3, r2
 8002aae:	2300      	movs	r3, #0
 8002ab0:	4644      	mov	r4, r8
 8002ab2:	fb04 f303 	mul.w	r3, r4, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a3e      	ldr	r2, [pc, #248]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x174>)
 8002aba:	4644      	mov	r4, r8
 8002abc:	fba4 0102 	umull	r0, r1, r4, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	617a      	str	r2, [r7, #20]
 8002acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ad0:	f7fd fb54 	bl	800017c <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
 8002adc:	e04e      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	4693      	mov	fp, r2
 8002ae6:	4652      	mov	r2, sl
 8002ae8:	465b      	mov	r3, fp
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	0159      	lsls	r1, r3, #5
 8002af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af8:	0150      	lsls	r0, r2, #5
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	ebb2 080a 	subs.w	r8, r2, sl
 8002b02:	eb63 090b 	sbc.w	r9, r3, fp
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	00eb      	lsls	r3, r5, #3
 8002b2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b30:	00e2      	lsls	r2, r4, #3
 8002b32:	4614      	mov	r4, r2
 8002b34:	461d      	mov	r5, r3
 8002b36:	eb14 030a 	adds.w	r3, r4, sl
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	eb45 030b 	adc.w	r3, r5, fp
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4e:	4629      	mov	r1, r5
 8002b50:	028b      	lsls	r3, r1, #10
 8002b52:	4620      	mov	r0, r4
 8002b54:	4629      	mov	r1, r5
 8002b56:	4604      	mov	r4, r0
 8002b58:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002b5c:	4601      	mov	r1, r0
 8002b5e:	028a      	lsls	r2, r1, #10
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	2200      	movs	r2, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	60fa      	str	r2, [r7, #12]
 8002b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b70:	f7fd fb04 	bl	800017c <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b80:	e00d      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_GetSysClockFreq+0x16c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0b5b      	lsrs	r3, r3, #13
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	3301      	adds	r3, #1
 8002b92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3738      	adds	r7, #56	; 0x38
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	016e3600 	.word	0x016e3600
 8002bb8:	0800362c 	.word	0x0800362c

08002bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d12c      	bne.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e016      	b.n	8002c1a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6253      	str	r3, [r2, #36]	; 0x24
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002c0c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002c20:	d105      	bne.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c28:	d101      	bne.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0f      	ldr	r2, [pc, #60]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 0201 	bic.w	r2, r3, #1
 8002c48:	490b      	ldr	r1, [pc, #44]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
 8002c78:	40023c00 	.word	0x40023c00

08002c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e031      	b.n	8002cf2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe f8f2 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 fa32 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d001      	beq.n	8002d14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d00e      	beq.n	8002d44 <HAL_TIM_Base_Start+0x48>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HAL_TIM_Base_Start+0x88>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_TIM_Base_Start+0x48>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <HAL_TIM_Base_Start+0x8c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_TIM_Base_Start+0x48>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_TIM_Base_Start+0x90>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d111      	bne.n	8002d68 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d010      	beq.n	8002d78 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d66:	e007      	b.n	8002d78 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40000800 	.word	0x40000800
 8002d8c:	40010800 	.word	0x40010800

08002d90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e031      	b.n	8002e06 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f829 	bl	8002e0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 f9a8 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0ac      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	f200 809f 	bhi.w	8002f88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08002f89 	.word	0x08002f89
 8002e58:	08002f89 	.word	0x08002f89
 8002e5c:	08002f89 	.word	0x08002f89
 8002e60:	08002ec5 	.word	0x08002ec5
 8002e64:	08002f89 	.word	0x08002f89
 8002e68:	08002f89 	.word	0x08002f89
 8002e6c:	08002f89 	.word	0x08002f89
 8002e70:	08002f07 	.word	0x08002f07
 8002e74:	08002f89 	.word	0x08002f89
 8002e78:	08002f89 	.word	0x08002f89
 8002e7c:	08002f89 	.word	0x08002f89
 8002e80:	08002f47 	.word	0x08002f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f9ac 	bl	80031e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	619a      	str	r2, [r3, #24]
      break;
 8002ec2:	e062      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f9c8 	bl	8003260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	021a      	lsls	r2, r3, #8
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	619a      	str	r2, [r3, #24]
      break;
 8002f04:	e041      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f9e5 	bl	80032dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0208 	orr.w	r2, r2, #8
 8002f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0204 	bic.w	r2, r2, #4
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
      break;
 8002f44:	e021      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fa02 	bl	8003356 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69d9      	ldr	r1, [r3, #28]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	61da      	str	r2, [r3, #28]
      break;
 8002f86:	e000      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_TIM_ConfigClockSource+0x18>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0b3      	b.n	800311c <HAL_TIM_ConfigClockSource+0x180>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fec:	d03e      	beq.n	800306c <HAL_TIM_ConfigClockSource+0xd0>
 8002fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff2:	f200 8087 	bhi.w	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	f000 8085 	beq.w	8003108 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	d87f      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d01a      	beq.n	800303e <HAL_TIM_ConfigClockSource+0xa2>
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d87b      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d050      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x116>
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d877      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d03c      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0xf6>
 8003018:	2b50      	cmp	r3, #80	; 0x50
 800301a:	d873      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d058      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x136>
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d86f      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d064      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x156>
 8003028:	2b30      	cmp	r3, #48	; 0x30
 800302a:	d86b      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d060      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x156>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d867      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d05c      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x156>
 8003038:	2b10      	cmp	r3, #16
 800303a:	d05a      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800303c:	e062      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f000 fa37 	bl	80034c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003060:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	609a      	str	r2, [r3, #8]
      break;
 800306a:	e04e      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f000 fa20 	bl	80034c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308e:	609a      	str	r2, [r3, #8]
      break;
 8003090:	e03b      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	461a      	mov	r2, r3
 80030a0:	f000 f997 	bl	80033d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2150      	movs	r1, #80	; 0x50
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f9ee 	bl	800348c <TIM_ITRx_SetConfig>
      break;
 80030b0:	e02b      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	461a      	mov	r2, r3
 80030c0:	f000 f9b5 	bl	800342e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2160      	movs	r1, #96	; 0x60
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f9de 	bl	800348c <TIM_ITRx_SetConfig>
      break;
 80030d0:	e01b      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	461a      	mov	r2, r3
 80030e0:	f000 f977 	bl	80033d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2140      	movs	r1, #64	; 0x40
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f9ce 	bl	800348c <TIM_ITRx_SetConfig>
      break;
 80030f0:	e00b      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4619      	mov	r1, r3
 80030fc:	4610      	mov	r0, r2
 80030fe:	f000 f9c5 	bl	800348c <TIM_ITRx_SetConfig>
        break;
 8003102:	e002      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003104:	bf00      	nop
 8003106:	e000      	b.n	800310a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003108:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d007      	beq.n	800314c <TIM_Base_SetConfig+0x28>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <TIM_Base_SetConfig+0xb0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_Base_SetConfig+0x28>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a24      	ldr	r2, [pc, #144]	; (80031d8 <TIM_Base_SetConfig+0xb4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d108      	bne.n	800315e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d013      	beq.n	800318e <TIM_Base_SetConfig+0x6a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <TIM_Base_SetConfig+0xb0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00f      	beq.n	800318e <TIM_Base_SetConfig+0x6a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <TIM_Base_SetConfig+0xb4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x6a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a18      	ldr	r2, [pc, #96]	; (80031dc <TIM_Base_SetConfig+0xb8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x6a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <TIM_Base_SetConfig+0xbc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x6a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <TIM_Base_SetConfig+0xc0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	615a      	str	r2, [r3, #20]
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40010800 	.word	0x40010800
 80031e0:	40010c00 	.word	0x40010c00
 80031e4:	40011000 	.word	0x40011000

080031e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0201 	bic.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0303 	bic.w	r3, r3, #3
 800321e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f023 0302 	bic.w	r3, r3, #2
 8003230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f023 0210 	bic.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0320 	bic.w	r3, r3, #32
 80032aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	621a      	str	r2, [r3, #32]
}
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	621a      	str	r2, [r3, #32]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003356:	b480      	push	{r7}
 8003358:	b087      	sub	sp, #28
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003384:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	031b      	lsls	r3, r3, #12
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f023 0201 	bic.w	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 030a 	bic.w	r3, r3, #10
 800340e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	621a      	str	r2, [r3, #32]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800342e:	b480      	push	{r7}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	031b      	lsls	r3, r3, #12
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800346a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f043 0307 	orr.w	r3, r3, #7
 80034ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003514:	2302      	movs	r3, #2
 8003516:	e046      	b.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355a:	d00e      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a10      	ldr	r2, [pc, #64]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10c      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	4313      	orrs	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40000800 	.word	0x40000800
 80035b8:	40010800 	.word	0x40010800

080035bc <__libc_init_array>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	2600      	movs	r6, #0
 80035c0:	4d0c      	ldr	r5, [pc, #48]	; (80035f4 <__libc_init_array+0x38>)
 80035c2:	4c0d      	ldr	r4, [pc, #52]	; (80035f8 <__libc_init_array+0x3c>)
 80035c4:	1b64      	subs	r4, r4, r5
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	42a6      	cmp	r6, r4
 80035ca:	d109      	bne.n	80035e0 <__libc_init_array+0x24>
 80035cc:	f000 f822 	bl	8003614 <_init>
 80035d0:	2600      	movs	r6, #0
 80035d2:	4d0a      	ldr	r5, [pc, #40]	; (80035fc <__libc_init_array+0x40>)
 80035d4:	4c0a      	ldr	r4, [pc, #40]	; (8003600 <__libc_init_array+0x44>)
 80035d6:	1b64      	subs	r4, r4, r5
 80035d8:	10a4      	asrs	r4, r4, #2
 80035da:	42a6      	cmp	r6, r4
 80035dc:	d105      	bne.n	80035ea <__libc_init_array+0x2e>
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e4:	4798      	blx	r3
 80035e6:	3601      	adds	r6, #1
 80035e8:	e7ee      	b.n	80035c8 <__libc_init_array+0xc>
 80035ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ee:	4798      	blx	r3
 80035f0:	3601      	adds	r6, #1
 80035f2:	e7f2      	b.n	80035da <__libc_init_array+0x1e>
 80035f4:	08003650 	.word	0x08003650
 80035f8:	08003650 	.word	0x08003650
 80035fc:	08003650 	.word	0x08003650
 8003600:	08003654 	.word	0x08003654

08003604 <memset>:
 8003604:	4603      	mov	r3, r0
 8003606:	4402      	add	r2, r0
 8003608:	4293      	cmp	r3, r2
 800360a:	d100      	bne.n	800360e <memset+0xa>
 800360c:	4770      	bx	lr
 800360e:	f803 1b01 	strb.w	r1, [r3], #1
 8003612:	e7f9      	b.n	8003608 <memset+0x4>

08003614 <_init>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

08003620 <_fini>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	bf00      	nop
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr
